// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.1
// Source: ud.proto

package server

import (
	"context"

	"gitee.com/unitedrhino/things/service/udsvr/internal/logic/rule"
	"gitee.com/unitedrhino/things/service/udsvr/internal/svc"
	"gitee.com/unitedrhino/things/service/udsvr/pb/ud"
)

type RuleServer struct {
	svcCtx *svc.ServiceContext
	ud.UnimplementedRuleServer
}

func NewRuleServer(svcCtx *svc.ServiceContext) *RuleServer {
	return &RuleServer{
		svcCtx: svcCtx,
	}
}

// 场景
func (s *RuleServer) SceneInfoCreate(ctx context.Context, in *ud.SceneInfo) (*ud.WithID, error) {
	l := rulelogic.NewSceneInfoCreateLogic(ctx, s.svcCtx)
	return l.SceneInfoCreate(in)
}

func (s *RuleServer) SceneInfoUpdate(ctx context.Context, in *ud.SceneInfo) (*ud.Empty, error) {
	l := rulelogic.NewSceneInfoUpdateLogic(ctx, s.svcCtx)
	return l.SceneInfoUpdate(in)
}

func (s *RuleServer) SceneInfoDelete(ctx context.Context, in *ud.WithID) (*ud.Empty, error) {
	l := rulelogic.NewSceneInfoDeleteLogic(ctx, s.svcCtx)
	return l.SceneInfoDelete(in)
}

func (s *RuleServer) SceneInfoIndex(ctx context.Context, in *ud.SceneInfoIndexReq) (*ud.SceneInfoIndexResp, error) {
	l := rulelogic.NewSceneInfoIndexLogic(ctx, s.svcCtx)
	return l.SceneInfoIndex(in)
}

func (s *RuleServer) SceneInfoRead(ctx context.Context, in *ud.WithID) (*ud.SceneInfo, error) {
	l := rulelogic.NewSceneInfoReadLogic(ctx, s.svcCtx)
	return l.SceneInfoRead(in)
}

func (s *RuleServer) SceneManuallyTrigger(ctx context.Context, in *ud.WithID) (*ud.Empty, error) {
	l := rulelogic.NewSceneManuallyTriggerLogic(ctx, s.svcCtx)
	return l.SceneManuallyTrigger(in)
}

func (s *RuleServer) SceneLogIndex(ctx context.Context, in *ud.SceneLogIndexReq) (*ud.SceneLogIndexResp, error) {
	l := rulelogic.NewSceneLogIndexLogic(ctx, s.svcCtx)
	return l.SceneLogIndex(in)
}

func (s *RuleServer) AlarmInfoCreate(ctx context.Context, in *ud.AlarmInfo) (*ud.WithID, error) {
	l := rulelogic.NewAlarmInfoCreateLogic(ctx, s.svcCtx)
	return l.AlarmInfoCreate(in)
}

func (s *RuleServer) AlarmInfoUpdate(ctx context.Context, in *ud.AlarmInfo) (*ud.Empty, error) {
	l := rulelogic.NewAlarmInfoUpdateLogic(ctx, s.svcCtx)
	return l.AlarmInfoUpdate(in)
}

func (s *RuleServer) AlarmInfoDelete(ctx context.Context, in *ud.WithID) (*ud.Empty, error) {
	l := rulelogic.NewAlarmInfoDeleteLogic(ctx, s.svcCtx)
	return l.AlarmInfoDelete(in)
}

func (s *RuleServer) AlarmInfoIndex(ctx context.Context, in *ud.AlarmInfoIndexReq) (*ud.AlarmInfoIndexResp, error) {
	l := rulelogic.NewAlarmInfoIndexLogic(ctx, s.svcCtx)
	return l.AlarmInfoIndex(in)
}

func (s *RuleServer) AlarmInfoRead(ctx context.Context, in *ud.WithID) (*ud.AlarmInfo, error) {
	l := rulelogic.NewAlarmInfoReadLogic(ctx, s.svcCtx)
	return l.AlarmInfoRead(in)
}

// 告警关联场景联动
func (s *RuleServer) AlarmSceneMultiCreate(ctx context.Context, in *ud.AlarmSceneMultiSaveReq) (*ud.Empty, error) {
	l := rulelogic.NewAlarmSceneMultiCreateLogic(ctx, s.svcCtx)
	return l.AlarmSceneMultiCreate(in)
}

func (s *RuleServer) AlarmSceneDelete(ctx context.Context, in *ud.AlarmSceneDeleteReq) (*ud.Empty, error) {
	l := rulelogic.NewAlarmSceneDeleteLogic(ctx, s.svcCtx)
	return l.AlarmSceneDelete(in)
}

func (s *RuleServer) AlarmSceneIndex(ctx context.Context, in *ud.AlarmSceneIndexReq) (*ud.AlarmSceneIndexResp, error) {
	l := rulelogic.NewAlarmSceneIndexLogic(ctx, s.svcCtx)
	return l.AlarmSceneIndex(in)
}

// 告警记录
func (s *RuleServer) AlarmRecordIndex(ctx context.Context, in *ud.AlarmRecordIndexReq) (*ud.AlarmRecordIndexResp, error) {
	l := rulelogic.NewAlarmRecordIndexLogic(ctx, s.svcCtx)
	return l.AlarmRecordIndex(in)
}

func (s *RuleServer) AlarmRecordCreate(ctx context.Context, in *ud.AlarmRecordCreateReq) (*ud.Empty, error) {
	l := rulelogic.NewAlarmRecordCreateLogic(ctx, s.svcCtx)
	return l.AlarmRecordCreate(in)
}

func (s *RuleServer) AlarmRecordDeal(ctx context.Context, in *ud.AlarmRecordDealReq) (*ud.Empty, error) {
	l := rulelogic.NewAlarmRecordDealLogic(ctx, s.svcCtx)
	return l.AlarmRecordDeal(in)
}
