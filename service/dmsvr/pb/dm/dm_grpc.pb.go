// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package dm

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DeviceManageClient is the client API for DeviceManage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeviceManageClient interface {
	//鉴定是否是root账号(提供给mqtt broker)
	RootCheck(ctx context.Context, in *RootCheckReq, opts ...grpc.CallOption) (*Empty, error)
	//新增设备
	DeviceInfoCreate(ctx context.Context, in *DeviceInfo, opts ...grpc.CallOption) (*Empty, error)
	//更新设备
	DeviceInfoUpdate(ctx context.Context, in *DeviceInfo, opts ...grpc.CallOption) (*Empty, error)
	DeviceOnlineMultiFix(ctx context.Context, in *DeviceOnlineMultiFixReq, opts ...grpc.CallOption) (*Empty, error)
	//删除设备
	DeviceInfoDelete(ctx context.Context, in *DeviceInfoDeleteReq, opts ...grpc.CallOption) (*Empty, error)
	//获取设备信息列表
	DeviceInfoIndex(ctx context.Context, in *DeviceInfoIndexReq, opts ...grpc.CallOption) (*DeviceInfoIndexResp, error)
	//批量更新设备状态
	DeviceInfoMultiUpdate(ctx context.Context, in *DeviceInfoMultiUpdateReq, opts ...grpc.CallOption) (*Empty, error)
	//获取设备信息详情
	DeviceInfoRead(ctx context.Context, in *DeviceInfoReadReq, opts ...grpc.CallOption) (*DeviceInfo, error)
	DeviceInfoBind(ctx context.Context, in *DeviceInfoBindReq, opts ...grpc.CallOption) (*Empty, error)
	DeviceInfoMultiBind(ctx context.Context, in *DeviceInfoMultiBindReq, opts ...grpc.CallOption) (*DeviceInfoMultiBindResp, error)
	DeviceInfoCanBind(ctx context.Context, in *DeviceInfoCanBindReq, opts ...grpc.CallOption) (*Empty, error)
	DeviceInfoUnbind(ctx context.Context, in *DeviceCore, opts ...grpc.CallOption) (*Empty, error)
	DeviceTransfer(ctx context.Context, in *DeviceTransferReq, opts ...grpc.CallOption) (*Empty, error)
	DeviceMove(ctx context.Context, in *DeviceMoveReq, opts ...grpc.CallOption) (*Empty, error)
	DeviceModuleVersionRead(ctx context.Context, in *DeviceModuleVersionReadReq, opts ...grpc.CallOption) (*DeviceModuleVersion, error)
	DeviceModuleVersionIndex(ctx context.Context, in *DeviceModuleVersionIndexReq, opts ...grpc.CallOption) (*DeviceModuleVersionIndexResp, error)
	//绑定网关下子设备设备
	DeviceGatewayMultiCreate(ctx context.Context, in *DeviceGatewayMultiCreateReq, opts ...grpc.CallOption) (*Empty, error)
	//绑定网关下子设备设备
	DeviceGatewayMultiUpdate(ctx context.Context, in *DeviceGatewayMultiSaveReq, opts ...grpc.CallOption) (*Empty, error)
	//获取绑定信息的设备信息列表
	DeviceGatewayIndex(ctx context.Context, in *DeviceGatewayIndexReq, opts ...grpc.CallOption) (*DeviceGatewayIndexResp, error)
	//删除网关下子设备
	DeviceGatewayMultiDelete(ctx context.Context, in *DeviceGatewayMultiSaveReq, opts ...grpc.CallOption) (*Empty, error)
	//设备计数
	DeviceInfoCount(ctx context.Context, in *DeviceInfoCountReq, opts ...grpc.CallOption) (*DeviceInfoCount, error)
	//设备类型
	DeviceTypeCount(ctx context.Context, in *DeviceTypeCountReq, opts ...grpc.CallOption) (*DeviceTypeCountResp, error)
	DeviceCount(ctx context.Context, in *DeviceCountReq, opts ...grpc.CallOption) (*DeviceCountResp, error)
	DeviceProfileRead(ctx context.Context, in *DeviceProfileReadReq, opts ...grpc.CallOption) (*DeviceProfile, error)
	DeviceProfileDelete(ctx context.Context, in *DeviceProfileReadReq, opts ...grpc.CallOption) (*Empty, error)
	DeviceProfileUpdate(ctx context.Context, in *DeviceProfile, opts ...grpc.CallOption) (*Empty, error)
	DeviceProfileIndex(ctx context.Context, in *DeviceProfileIndexReq, opts ...grpc.CallOption) (*DeviceProfileIndexResp, error)
}

type deviceManageClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceManageClient(cc grpc.ClientConnInterface) DeviceManageClient {
	return &deviceManageClient{cc}
}

func (c *deviceManageClient) RootCheck(ctx context.Context, in *RootCheckReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/dm.DeviceManage/rootCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceManageClient) DeviceInfoCreate(ctx context.Context, in *DeviceInfo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/dm.DeviceManage/deviceInfoCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceManageClient) DeviceInfoUpdate(ctx context.Context, in *DeviceInfo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/dm.DeviceManage/deviceInfoUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceManageClient) DeviceOnlineMultiFix(ctx context.Context, in *DeviceOnlineMultiFixReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/dm.DeviceManage/deviceOnlineMultiFix", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceManageClient) DeviceInfoDelete(ctx context.Context, in *DeviceInfoDeleteReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/dm.DeviceManage/deviceInfoDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceManageClient) DeviceInfoIndex(ctx context.Context, in *DeviceInfoIndexReq, opts ...grpc.CallOption) (*DeviceInfoIndexResp, error) {
	out := new(DeviceInfoIndexResp)
	err := c.cc.Invoke(ctx, "/dm.DeviceManage/deviceInfoIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceManageClient) DeviceInfoMultiUpdate(ctx context.Context, in *DeviceInfoMultiUpdateReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/dm.DeviceManage/DeviceInfoMultiUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceManageClient) DeviceInfoRead(ctx context.Context, in *DeviceInfoReadReq, opts ...grpc.CallOption) (*DeviceInfo, error) {
	out := new(DeviceInfo)
	err := c.cc.Invoke(ctx, "/dm.DeviceManage/deviceInfoRead", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceManageClient) DeviceInfoBind(ctx context.Context, in *DeviceInfoBindReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/dm.DeviceManage/deviceInfoBind", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceManageClient) DeviceInfoMultiBind(ctx context.Context, in *DeviceInfoMultiBindReq, opts ...grpc.CallOption) (*DeviceInfoMultiBindResp, error) {
	out := new(DeviceInfoMultiBindResp)
	err := c.cc.Invoke(ctx, "/dm.DeviceManage/deviceInfoMultiBind", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceManageClient) DeviceInfoCanBind(ctx context.Context, in *DeviceInfoCanBindReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/dm.DeviceManage/deviceInfoCanBind", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceManageClient) DeviceInfoUnbind(ctx context.Context, in *DeviceCore, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/dm.DeviceManage/deviceInfoUnbind", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceManageClient) DeviceTransfer(ctx context.Context, in *DeviceTransferReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/dm.DeviceManage/deviceTransfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceManageClient) DeviceMove(ctx context.Context, in *DeviceMoveReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/dm.DeviceManage/deviceMove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceManageClient) DeviceModuleVersionRead(ctx context.Context, in *DeviceModuleVersionReadReq, opts ...grpc.CallOption) (*DeviceModuleVersion, error) {
	out := new(DeviceModuleVersion)
	err := c.cc.Invoke(ctx, "/dm.DeviceManage/deviceModuleVersionRead", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceManageClient) DeviceModuleVersionIndex(ctx context.Context, in *DeviceModuleVersionIndexReq, opts ...grpc.CallOption) (*DeviceModuleVersionIndexResp, error) {
	out := new(DeviceModuleVersionIndexResp)
	err := c.cc.Invoke(ctx, "/dm.DeviceManage/deviceModuleVersionIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceManageClient) DeviceGatewayMultiCreate(ctx context.Context, in *DeviceGatewayMultiCreateReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/dm.DeviceManage/deviceGatewayMultiCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceManageClient) DeviceGatewayMultiUpdate(ctx context.Context, in *DeviceGatewayMultiSaveReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/dm.DeviceManage/deviceGatewayMultiUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceManageClient) DeviceGatewayIndex(ctx context.Context, in *DeviceGatewayIndexReq, opts ...grpc.CallOption) (*DeviceGatewayIndexResp, error) {
	out := new(DeviceGatewayIndexResp)
	err := c.cc.Invoke(ctx, "/dm.DeviceManage/deviceGatewayIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceManageClient) DeviceGatewayMultiDelete(ctx context.Context, in *DeviceGatewayMultiSaveReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/dm.DeviceManage/deviceGatewayMultiDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceManageClient) DeviceInfoCount(ctx context.Context, in *DeviceInfoCountReq, opts ...grpc.CallOption) (*DeviceInfoCount, error) {
	out := new(DeviceInfoCount)
	err := c.cc.Invoke(ctx, "/dm.DeviceManage/deviceInfoCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceManageClient) DeviceTypeCount(ctx context.Context, in *DeviceTypeCountReq, opts ...grpc.CallOption) (*DeviceTypeCountResp, error) {
	out := new(DeviceTypeCountResp)
	err := c.cc.Invoke(ctx, "/dm.DeviceManage/deviceTypeCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceManageClient) DeviceCount(ctx context.Context, in *DeviceCountReq, opts ...grpc.CallOption) (*DeviceCountResp, error) {
	out := new(DeviceCountResp)
	err := c.cc.Invoke(ctx, "/dm.DeviceManage/deviceCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceManageClient) DeviceProfileRead(ctx context.Context, in *DeviceProfileReadReq, opts ...grpc.CallOption) (*DeviceProfile, error) {
	out := new(DeviceProfile)
	err := c.cc.Invoke(ctx, "/dm.DeviceManage/deviceProfileRead", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceManageClient) DeviceProfileDelete(ctx context.Context, in *DeviceProfileReadReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/dm.DeviceManage/deviceProfileDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceManageClient) DeviceProfileUpdate(ctx context.Context, in *DeviceProfile, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/dm.DeviceManage/deviceProfileUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceManageClient) DeviceProfileIndex(ctx context.Context, in *DeviceProfileIndexReq, opts ...grpc.CallOption) (*DeviceProfileIndexResp, error) {
	out := new(DeviceProfileIndexResp)
	err := c.cc.Invoke(ctx, "/dm.DeviceManage/deviceProfileIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeviceManageServer is the server API for DeviceManage service.
// All implementations must embed UnimplementedDeviceManageServer
// for forward compatibility
type DeviceManageServer interface {
	//鉴定是否是root账号(提供给mqtt broker)
	RootCheck(context.Context, *RootCheckReq) (*Empty, error)
	//新增设备
	DeviceInfoCreate(context.Context, *DeviceInfo) (*Empty, error)
	//更新设备
	DeviceInfoUpdate(context.Context, *DeviceInfo) (*Empty, error)
	DeviceOnlineMultiFix(context.Context, *DeviceOnlineMultiFixReq) (*Empty, error)
	//删除设备
	DeviceInfoDelete(context.Context, *DeviceInfoDeleteReq) (*Empty, error)
	//获取设备信息列表
	DeviceInfoIndex(context.Context, *DeviceInfoIndexReq) (*DeviceInfoIndexResp, error)
	//批量更新设备状态
	DeviceInfoMultiUpdate(context.Context, *DeviceInfoMultiUpdateReq) (*Empty, error)
	//获取设备信息详情
	DeviceInfoRead(context.Context, *DeviceInfoReadReq) (*DeviceInfo, error)
	DeviceInfoBind(context.Context, *DeviceInfoBindReq) (*Empty, error)
	DeviceInfoMultiBind(context.Context, *DeviceInfoMultiBindReq) (*DeviceInfoMultiBindResp, error)
	DeviceInfoCanBind(context.Context, *DeviceInfoCanBindReq) (*Empty, error)
	DeviceInfoUnbind(context.Context, *DeviceCore) (*Empty, error)
	DeviceTransfer(context.Context, *DeviceTransferReq) (*Empty, error)
	DeviceMove(context.Context, *DeviceMoveReq) (*Empty, error)
	DeviceModuleVersionRead(context.Context, *DeviceModuleVersionReadReq) (*DeviceModuleVersion, error)
	DeviceModuleVersionIndex(context.Context, *DeviceModuleVersionIndexReq) (*DeviceModuleVersionIndexResp, error)
	//绑定网关下子设备设备
	DeviceGatewayMultiCreate(context.Context, *DeviceGatewayMultiCreateReq) (*Empty, error)
	//绑定网关下子设备设备
	DeviceGatewayMultiUpdate(context.Context, *DeviceGatewayMultiSaveReq) (*Empty, error)
	//获取绑定信息的设备信息列表
	DeviceGatewayIndex(context.Context, *DeviceGatewayIndexReq) (*DeviceGatewayIndexResp, error)
	//删除网关下子设备
	DeviceGatewayMultiDelete(context.Context, *DeviceGatewayMultiSaveReq) (*Empty, error)
	//设备计数
	DeviceInfoCount(context.Context, *DeviceInfoCountReq) (*DeviceInfoCount, error)
	//设备类型
	DeviceTypeCount(context.Context, *DeviceTypeCountReq) (*DeviceTypeCountResp, error)
	DeviceCount(context.Context, *DeviceCountReq) (*DeviceCountResp, error)
	DeviceProfileRead(context.Context, *DeviceProfileReadReq) (*DeviceProfile, error)
	DeviceProfileDelete(context.Context, *DeviceProfileReadReq) (*Empty, error)
	DeviceProfileUpdate(context.Context, *DeviceProfile) (*Empty, error)
	DeviceProfileIndex(context.Context, *DeviceProfileIndexReq) (*DeviceProfileIndexResp, error)
	mustEmbedUnimplementedDeviceManageServer()
}

// UnimplementedDeviceManageServer must be embedded to have forward compatible implementations.
type UnimplementedDeviceManageServer struct {
}

func (UnimplementedDeviceManageServer) RootCheck(context.Context, *RootCheckReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RootCheck not implemented")
}
func (UnimplementedDeviceManageServer) DeviceInfoCreate(context.Context, *DeviceInfo) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeviceInfoCreate not implemented")
}
func (UnimplementedDeviceManageServer) DeviceInfoUpdate(context.Context, *DeviceInfo) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeviceInfoUpdate not implemented")
}
func (UnimplementedDeviceManageServer) DeviceOnlineMultiFix(context.Context, *DeviceOnlineMultiFixReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeviceOnlineMultiFix not implemented")
}
func (UnimplementedDeviceManageServer) DeviceInfoDelete(context.Context, *DeviceInfoDeleteReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeviceInfoDelete not implemented")
}
func (UnimplementedDeviceManageServer) DeviceInfoIndex(context.Context, *DeviceInfoIndexReq) (*DeviceInfoIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeviceInfoIndex not implemented")
}
func (UnimplementedDeviceManageServer) DeviceInfoMultiUpdate(context.Context, *DeviceInfoMultiUpdateReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeviceInfoMultiUpdate not implemented")
}
func (UnimplementedDeviceManageServer) DeviceInfoRead(context.Context, *DeviceInfoReadReq) (*DeviceInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeviceInfoRead not implemented")
}
func (UnimplementedDeviceManageServer) DeviceInfoBind(context.Context, *DeviceInfoBindReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeviceInfoBind not implemented")
}
func (UnimplementedDeviceManageServer) DeviceInfoMultiBind(context.Context, *DeviceInfoMultiBindReq) (*DeviceInfoMultiBindResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeviceInfoMultiBind not implemented")
}
func (UnimplementedDeviceManageServer) DeviceInfoCanBind(context.Context, *DeviceInfoCanBindReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeviceInfoCanBind not implemented")
}
func (UnimplementedDeviceManageServer) DeviceInfoUnbind(context.Context, *DeviceCore) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeviceInfoUnbind not implemented")
}
func (UnimplementedDeviceManageServer) DeviceTransfer(context.Context, *DeviceTransferReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeviceTransfer not implemented")
}
func (UnimplementedDeviceManageServer) DeviceMove(context.Context, *DeviceMoveReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeviceMove not implemented")
}
func (UnimplementedDeviceManageServer) DeviceModuleVersionRead(context.Context, *DeviceModuleVersionReadReq) (*DeviceModuleVersion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeviceModuleVersionRead not implemented")
}
func (UnimplementedDeviceManageServer) DeviceModuleVersionIndex(context.Context, *DeviceModuleVersionIndexReq) (*DeviceModuleVersionIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeviceModuleVersionIndex not implemented")
}
func (UnimplementedDeviceManageServer) DeviceGatewayMultiCreate(context.Context, *DeviceGatewayMultiCreateReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeviceGatewayMultiCreate not implemented")
}
func (UnimplementedDeviceManageServer) DeviceGatewayMultiUpdate(context.Context, *DeviceGatewayMultiSaveReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeviceGatewayMultiUpdate not implemented")
}
func (UnimplementedDeviceManageServer) DeviceGatewayIndex(context.Context, *DeviceGatewayIndexReq) (*DeviceGatewayIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeviceGatewayIndex not implemented")
}
func (UnimplementedDeviceManageServer) DeviceGatewayMultiDelete(context.Context, *DeviceGatewayMultiSaveReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeviceGatewayMultiDelete not implemented")
}
func (UnimplementedDeviceManageServer) DeviceInfoCount(context.Context, *DeviceInfoCountReq) (*DeviceInfoCount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeviceInfoCount not implemented")
}
func (UnimplementedDeviceManageServer) DeviceTypeCount(context.Context, *DeviceTypeCountReq) (*DeviceTypeCountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeviceTypeCount not implemented")
}
func (UnimplementedDeviceManageServer) DeviceCount(context.Context, *DeviceCountReq) (*DeviceCountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeviceCount not implemented")
}
func (UnimplementedDeviceManageServer) DeviceProfileRead(context.Context, *DeviceProfileReadReq) (*DeviceProfile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeviceProfileRead not implemented")
}
func (UnimplementedDeviceManageServer) DeviceProfileDelete(context.Context, *DeviceProfileReadReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeviceProfileDelete not implemented")
}
func (UnimplementedDeviceManageServer) DeviceProfileUpdate(context.Context, *DeviceProfile) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeviceProfileUpdate not implemented")
}
func (UnimplementedDeviceManageServer) DeviceProfileIndex(context.Context, *DeviceProfileIndexReq) (*DeviceProfileIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeviceProfileIndex not implemented")
}
func (UnimplementedDeviceManageServer) mustEmbedUnimplementedDeviceManageServer() {}

// UnsafeDeviceManageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeviceManageServer will
// result in compilation errors.
type UnsafeDeviceManageServer interface {
	mustEmbedUnimplementedDeviceManageServer()
}

func RegisterDeviceManageServer(s grpc.ServiceRegistrar, srv DeviceManageServer) {
	s.RegisterService(&DeviceManage_ServiceDesc, srv)
}

func _DeviceManage_RootCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RootCheckReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceManageServer).RootCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.DeviceManage/rootCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceManageServer).RootCheck(ctx, req.(*RootCheckReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceManage_DeviceInfoCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceManageServer).DeviceInfoCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.DeviceManage/deviceInfoCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceManageServer).DeviceInfoCreate(ctx, req.(*DeviceInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceManage_DeviceInfoUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceManageServer).DeviceInfoUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.DeviceManage/deviceInfoUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceManageServer).DeviceInfoUpdate(ctx, req.(*DeviceInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceManage_DeviceOnlineMultiFix_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceOnlineMultiFixReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceManageServer).DeviceOnlineMultiFix(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.DeviceManage/deviceOnlineMultiFix",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceManageServer).DeviceOnlineMultiFix(ctx, req.(*DeviceOnlineMultiFixReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceManage_DeviceInfoDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceInfoDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceManageServer).DeviceInfoDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.DeviceManage/deviceInfoDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceManageServer).DeviceInfoDelete(ctx, req.(*DeviceInfoDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceManage_DeviceInfoIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceInfoIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceManageServer).DeviceInfoIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.DeviceManage/deviceInfoIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceManageServer).DeviceInfoIndex(ctx, req.(*DeviceInfoIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceManage_DeviceInfoMultiUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceInfoMultiUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceManageServer).DeviceInfoMultiUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.DeviceManage/DeviceInfoMultiUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceManageServer).DeviceInfoMultiUpdate(ctx, req.(*DeviceInfoMultiUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceManage_DeviceInfoRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceInfoReadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceManageServer).DeviceInfoRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.DeviceManage/deviceInfoRead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceManageServer).DeviceInfoRead(ctx, req.(*DeviceInfoReadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceManage_DeviceInfoBind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceInfoBindReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceManageServer).DeviceInfoBind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.DeviceManage/deviceInfoBind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceManageServer).DeviceInfoBind(ctx, req.(*DeviceInfoBindReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceManage_DeviceInfoMultiBind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceInfoMultiBindReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceManageServer).DeviceInfoMultiBind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.DeviceManage/deviceInfoMultiBind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceManageServer).DeviceInfoMultiBind(ctx, req.(*DeviceInfoMultiBindReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceManage_DeviceInfoCanBind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceInfoCanBindReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceManageServer).DeviceInfoCanBind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.DeviceManage/deviceInfoCanBind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceManageServer).DeviceInfoCanBind(ctx, req.(*DeviceInfoCanBindReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceManage_DeviceInfoUnbind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceCore)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceManageServer).DeviceInfoUnbind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.DeviceManage/deviceInfoUnbind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceManageServer).DeviceInfoUnbind(ctx, req.(*DeviceCore))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceManage_DeviceTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceTransferReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceManageServer).DeviceTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.DeviceManage/deviceTransfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceManageServer).DeviceTransfer(ctx, req.(*DeviceTransferReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceManage_DeviceMove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceMoveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceManageServer).DeviceMove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.DeviceManage/deviceMove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceManageServer).DeviceMove(ctx, req.(*DeviceMoveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceManage_DeviceModuleVersionRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceModuleVersionReadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceManageServer).DeviceModuleVersionRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.DeviceManage/deviceModuleVersionRead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceManageServer).DeviceModuleVersionRead(ctx, req.(*DeviceModuleVersionReadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceManage_DeviceModuleVersionIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceModuleVersionIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceManageServer).DeviceModuleVersionIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.DeviceManage/deviceModuleVersionIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceManageServer).DeviceModuleVersionIndex(ctx, req.(*DeviceModuleVersionIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceManage_DeviceGatewayMultiCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceGatewayMultiCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceManageServer).DeviceGatewayMultiCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.DeviceManage/deviceGatewayMultiCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceManageServer).DeviceGatewayMultiCreate(ctx, req.(*DeviceGatewayMultiCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceManage_DeviceGatewayMultiUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceGatewayMultiSaveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceManageServer).DeviceGatewayMultiUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.DeviceManage/deviceGatewayMultiUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceManageServer).DeviceGatewayMultiUpdate(ctx, req.(*DeviceGatewayMultiSaveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceManage_DeviceGatewayIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceGatewayIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceManageServer).DeviceGatewayIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.DeviceManage/deviceGatewayIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceManageServer).DeviceGatewayIndex(ctx, req.(*DeviceGatewayIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceManage_DeviceGatewayMultiDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceGatewayMultiSaveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceManageServer).DeviceGatewayMultiDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.DeviceManage/deviceGatewayMultiDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceManageServer).DeviceGatewayMultiDelete(ctx, req.(*DeviceGatewayMultiSaveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceManage_DeviceInfoCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceInfoCountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceManageServer).DeviceInfoCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.DeviceManage/deviceInfoCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceManageServer).DeviceInfoCount(ctx, req.(*DeviceInfoCountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceManage_DeviceTypeCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceTypeCountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceManageServer).DeviceTypeCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.DeviceManage/deviceTypeCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceManageServer).DeviceTypeCount(ctx, req.(*DeviceTypeCountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceManage_DeviceCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceCountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceManageServer).DeviceCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.DeviceManage/deviceCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceManageServer).DeviceCount(ctx, req.(*DeviceCountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceManage_DeviceProfileRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceProfileReadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceManageServer).DeviceProfileRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.DeviceManage/deviceProfileRead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceManageServer).DeviceProfileRead(ctx, req.(*DeviceProfileReadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceManage_DeviceProfileDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceProfileReadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceManageServer).DeviceProfileDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.DeviceManage/deviceProfileDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceManageServer).DeviceProfileDelete(ctx, req.(*DeviceProfileReadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceManage_DeviceProfileUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceProfile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceManageServer).DeviceProfileUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.DeviceManage/deviceProfileUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceManageServer).DeviceProfileUpdate(ctx, req.(*DeviceProfile))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceManage_DeviceProfileIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceProfileIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceManageServer).DeviceProfileIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.DeviceManage/deviceProfileIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceManageServer).DeviceProfileIndex(ctx, req.(*DeviceProfileIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

// DeviceManage_ServiceDesc is the grpc.ServiceDesc for DeviceManage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeviceManage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dm.DeviceManage",
	HandlerType: (*DeviceManageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "rootCheck",
			Handler:    _DeviceManage_RootCheck_Handler,
		},
		{
			MethodName: "deviceInfoCreate",
			Handler:    _DeviceManage_DeviceInfoCreate_Handler,
		},
		{
			MethodName: "deviceInfoUpdate",
			Handler:    _DeviceManage_DeviceInfoUpdate_Handler,
		},
		{
			MethodName: "deviceOnlineMultiFix",
			Handler:    _DeviceManage_DeviceOnlineMultiFix_Handler,
		},
		{
			MethodName: "deviceInfoDelete",
			Handler:    _DeviceManage_DeviceInfoDelete_Handler,
		},
		{
			MethodName: "deviceInfoIndex",
			Handler:    _DeviceManage_DeviceInfoIndex_Handler,
		},
		{
			MethodName: "DeviceInfoMultiUpdate",
			Handler:    _DeviceManage_DeviceInfoMultiUpdate_Handler,
		},
		{
			MethodName: "deviceInfoRead",
			Handler:    _DeviceManage_DeviceInfoRead_Handler,
		},
		{
			MethodName: "deviceInfoBind",
			Handler:    _DeviceManage_DeviceInfoBind_Handler,
		},
		{
			MethodName: "deviceInfoMultiBind",
			Handler:    _DeviceManage_DeviceInfoMultiBind_Handler,
		},
		{
			MethodName: "deviceInfoCanBind",
			Handler:    _DeviceManage_DeviceInfoCanBind_Handler,
		},
		{
			MethodName: "deviceInfoUnbind",
			Handler:    _DeviceManage_DeviceInfoUnbind_Handler,
		},
		{
			MethodName: "deviceTransfer",
			Handler:    _DeviceManage_DeviceTransfer_Handler,
		},
		{
			MethodName: "deviceMove",
			Handler:    _DeviceManage_DeviceMove_Handler,
		},
		{
			MethodName: "deviceModuleVersionRead",
			Handler:    _DeviceManage_DeviceModuleVersionRead_Handler,
		},
		{
			MethodName: "deviceModuleVersionIndex",
			Handler:    _DeviceManage_DeviceModuleVersionIndex_Handler,
		},
		{
			MethodName: "deviceGatewayMultiCreate",
			Handler:    _DeviceManage_DeviceGatewayMultiCreate_Handler,
		},
		{
			MethodName: "deviceGatewayMultiUpdate",
			Handler:    _DeviceManage_DeviceGatewayMultiUpdate_Handler,
		},
		{
			MethodName: "deviceGatewayIndex",
			Handler:    _DeviceManage_DeviceGatewayIndex_Handler,
		},
		{
			MethodName: "deviceGatewayMultiDelete",
			Handler:    _DeviceManage_DeviceGatewayMultiDelete_Handler,
		},
		{
			MethodName: "deviceInfoCount",
			Handler:    _DeviceManage_DeviceInfoCount_Handler,
		},
		{
			MethodName: "deviceTypeCount",
			Handler:    _DeviceManage_DeviceTypeCount_Handler,
		},
		{
			MethodName: "deviceCount",
			Handler:    _DeviceManage_DeviceCount_Handler,
		},
		{
			MethodName: "deviceProfileRead",
			Handler:    _DeviceManage_DeviceProfileRead_Handler,
		},
		{
			MethodName: "deviceProfileDelete",
			Handler:    _DeviceManage_DeviceProfileDelete_Handler,
		},
		{
			MethodName: "deviceProfileUpdate",
			Handler:    _DeviceManage_DeviceProfileUpdate_Handler,
		},
		{
			MethodName: "deviceProfileIndex",
			Handler:    _DeviceManage_DeviceProfileIndex_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/dm.proto",
}

// ProductManageClient is the client API for ProductManage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductManageClient interface {
	ProductInit(ctx context.Context, in *ProductInitReq, opts ...grpc.CallOption) (*Empty, error)
	//新增产品
	ProductInfoCreate(ctx context.Context, in *ProductInfo, opts ...grpc.CallOption) (*Empty, error)
	//更新产品
	ProductInfoUpdate(ctx context.Context, in *ProductInfo, opts ...grpc.CallOption) (*Empty, error)
	//删除产品
	ProductInfoDelete(ctx context.Context, in *ProductInfoDeleteReq, opts ...grpc.CallOption) (*Empty, error)
	//获取产品信息列表
	ProductInfoIndex(ctx context.Context, in *ProductInfoIndexReq, opts ...grpc.CallOption) (*ProductInfoIndexResp, error)
	//获取产品信息详情
	ProductInfoRead(ctx context.Context, in *ProductInfoReadReq, opts ...grpc.CallOption) (*ProductInfo, error)
	//更新产品物模型
	ProductSchemaUpdate(ctx context.Context, in *ProductSchemaUpdateReq, opts ...grpc.CallOption) (*Empty, error)
	//新增产品
	ProductSchemaCreate(ctx context.Context, in *ProductSchemaCreateReq, opts ...grpc.CallOption) (*Empty, error)
	//批量新增物模型,只新增没有的,已有的不处理
	ProductSchemaMultiCreate(ctx context.Context, in *ProductSchemaMultiCreateReq, opts ...grpc.CallOption) (*Empty, error)
	//删除产品
	ProductSchemaDelete(ctx context.Context, in *ProductSchemaDeleteReq, opts ...grpc.CallOption) (*Empty, error)
	//获取产品信息列表
	ProductSchemaIndex(ctx context.Context, in *ProductSchemaIndexReq, opts ...grpc.CallOption) (*ProductSchemaIndexResp, error)
	//删除产品
	ProductSchemaTslImport(ctx context.Context, in *ProductSchemaTslImportReq, opts ...grpc.CallOption) (*Empty, error)
	//获取产品信息列表
	ProductSchemaTslRead(ctx context.Context, in *ProductSchemaTslReadReq, opts ...grpc.CallOption) (*ProductSchemaTslReadResp, error)
	//脚本管理
	ProductCustomRead(ctx context.Context, in *ProductCustomReadReq, opts ...grpc.CallOption) (*ProductCustom, error)
	ProductCustomUpdate(ctx context.Context, in *ProductCustom, opts ...grpc.CallOption) (*Empty, error)
	//新增产品
	ProductCategoryCreate(ctx context.Context, in *ProductCategory, opts ...grpc.CallOption) (*WithID, error)
	//更新产品
	ProductCategoryUpdate(ctx context.Context, in *ProductCategory, opts ...grpc.CallOption) (*Empty, error)
	//删除产品
	ProductCategoryDelete(ctx context.Context, in *WithID, opts ...grpc.CallOption) (*Empty, error)
	//获取产品信息列表
	ProductCategoryIndex(ctx context.Context, in *ProductCategoryIndexReq, opts ...grpc.CallOption) (*ProductCategoryIndexResp, error)
	//获取产品信息详情
	ProductCategoryRead(ctx context.Context, in *WithIDChildren, opts ...grpc.CallOption) (*ProductCategory, error)
	//获取产品品类下的物模型列表,绑定的物模型会自动添加到该产品品类及子分类的产品中,并不支持删除
	ProductCategorySchemaIndex(ctx context.Context, in *ProductCategorySchemaIndexReq, opts ...grpc.CallOption) (*ProductCategorySchemaIndexResp, error)
	ProductCategorySchemaMultiUpdate(ctx context.Context, in *ProductCategorySchemaMultiSaveReq, opts ...grpc.CallOption) (*Empty, error)
	ProductCategorySchemaMultiCreate(ctx context.Context, in *ProductCategorySchemaMultiSaveReq, opts ...grpc.CallOption) (*Empty, error)
	ProductCategorySchemaMultiDelete(ctx context.Context, in *ProductCategorySchemaMultiSaveReq, opts ...grpc.CallOption) (*Empty, error)
}

type productManageClient struct {
	cc grpc.ClientConnInterface
}

func NewProductManageClient(cc grpc.ClientConnInterface) ProductManageClient {
	return &productManageClient{cc}
}

func (c *productManageClient) ProductInit(ctx context.Context, in *ProductInitReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/dm.ProductManage/productInit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productManageClient) ProductInfoCreate(ctx context.Context, in *ProductInfo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/dm.ProductManage/productInfoCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productManageClient) ProductInfoUpdate(ctx context.Context, in *ProductInfo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/dm.ProductManage/productInfoUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productManageClient) ProductInfoDelete(ctx context.Context, in *ProductInfoDeleteReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/dm.ProductManage/productInfoDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productManageClient) ProductInfoIndex(ctx context.Context, in *ProductInfoIndexReq, opts ...grpc.CallOption) (*ProductInfoIndexResp, error) {
	out := new(ProductInfoIndexResp)
	err := c.cc.Invoke(ctx, "/dm.ProductManage/productInfoIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productManageClient) ProductInfoRead(ctx context.Context, in *ProductInfoReadReq, opts ...grpc.CallOption) (*ProductInfo, error) {
	out := new(ProductInfo)
	err := c.cc.Invoke(ctx, "/dm.ProductManage/productInfoRead", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productManageClient) ProductSchemaUpdate(ctx context.Context, in *ProductSchemaUpdateReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/dm.ProductManage/productSchemaUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productManageClient) ProductSchemaCreate(ctx context.Context, in *ProductSchemaCreateReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/dm.ProductManage/productSchemaCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productManageClient) ProductSchemaMultiCreate(ctx context.Context, in *ProductSchemaMultiCreateReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/dm.ProductManage/productSchemaMultiCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productManageClient) ProductSchemaDelete(ctx context.Context, in *ProductSchemaDeleteReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/dm.ProductManage/productSchemaDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productManageClient) ProductSchemaIndex(ctx context.Context, in *ProductSchemaIndexReq, opts ...grpc.CallOption) (*ProductSchemaIndexResp, error) {
	out := new(ProductSchemaIndexResp)
	err := c.cc.Invoke(ctx, "/dm.ProductManage/productSchemaIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productManageClient) ProductSchemaTslImport(ctx context.Context, in *ProductSchemaTslImportReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/dm.ProductManage/productSchemaTslImport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productManageClient) ProductSchemaTslRead(ctx context.Context, in *ProductSchemaTslReadReq, opts ...grpc.CallOption) (*ProductSchemaTslReadResp, error) {
	out := new(ProductSchemaTslReadResp)
	err := c.cc.Invoke(ctx, "/dm.ProductManage/productSchemaTslRead", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productManageClient) ProductCustomRead(ctx context.Context, in *ProductCustomReadReq, opts ...grpc.CallOption) (*ProductCustom, error) {
	out := new(ProductCustom)
	err := c.cc.Invoke(ctx, "/dm.ProductManage/productCustomRead", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productManageClient) ProductCustomUpdate(ctx context.Context, in *ProductCustom, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/dm.ProductManage/productCustomUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productManageClient) ProductCategoryCreate(ctx context.Context, in *ProductCategory, opts ...grpc.CallOption) (*WithID, error) {
	out := new(WithID)
	err := c.cc.Invoke(ctx, "/dm.ProductManage/productCategoryCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productManageClient) ProductCategoryUpdate(ctx context.Context, in *ProductCategory, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/dm.ProductManage/productCategoryUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productManageClient) ProductCategoryDelete(ctx context.Context, in *WithID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/dm.ProductManage/productCategoryDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productManageClient) ProductCategoryIndex(ctx context.Context, in *ProductCategoryIndexReq, opts ...grpc.CallOption) (*ProductCategoryIndexResp, error) {
	out := new(ProductCategoryIndexResp)
	err := c.cc.Invoke(ctx, "/dm.ProductManage/productCategoryIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productManageClient) ProductCategoryRead(ctx context.Context, in *WithIDChildren, opts ...grpc.CallOption) (*ProductCategory, error) {
	out := new(ProductCategory)
	err := c.cc.Invoke(ctx, "/dm.ProductManage/productCategoryRead", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productManageClient) ProductCategorySchemaIndex(ctx context.Context, in *ProductCategorySchemaIndexReq, opts ...grpc.CallOption) (*ProductCategorySchemaIndexResp, error) {
	out := new(ProductCategorySchemaIndexResp)
	err := c.cc.Invoke(ctx, "/dm.ProductManage/productCategorySchemaIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productManageClient) ProductCategorySchemaMultiUpdate(ctx context.Context, in *ProductCategorySchemaMultiSaveReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/dm.ProductManage/productCategorySchemaMultiUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productManageClient) ProductCategorySchemaMultiCreate(ctx context.Context, in *ProductCategorySchemaMultiSaveReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/dm.ProductManage/productCategorySchemaMultiCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productManageClient) ProductCategorySchemaMultiDelete(ctx context.Context, in *ProductCategorySchemaMultiSaveReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/dm.ProductManage/productCategorySchemaMultiDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductManageServer is the server API for ProductManage service.
// All implementations must embed UnimplementedProductManageServer
// for forward compatibility
type ProductManageServer interface {
	ProductInit(context.Context, *ProductInitReq) (*Empty, error)
	//新增产品
	ProductInfoCreate(context.Context, *ProductInfo) (*Empty, error)
	//更新产品
	ProductInfoUpdate(context.Context, *ProductInfo) (*Empty, error)
	//删除产品
	ProductInfoDelete(context.Context, *ProductInfoDeleteReq) (*Empty, error)
	//获取产品信息列表
	ProductInfoIndex(context.Context, *ProductInfoIndexReq) (*ProductInfoIndexResp, error)
	//获取产品信息详情
	ProductInfoRead(context.Context, *ProductInfoReadReq) (*ProductInfo, error)
	//更新产品物模型
	ProductSchemaUpdate(context.Context, *ProductSchemaUpdateReq) (*Empty, error)
	//新增产品
	ProductSchemaCreate(context.Context, *ProductSchemaCreateReq) (*Empty, error)
	//批量新增物模型,只新增没有的,已有的不处理
	ProductSchemaMultiCreate(context.Context, *ProductSchemaMultiCreateReq) (*Empty, error)
	//删除产品
	ProductSchemaDelete(context.Context, *ProductSchemaDeleteReq) (*Empty, error)
	//获取产品信息列表
	ProductSchemaIndex(context.Context, *ProductSchemaIndexReq) (*ProductSchemaIndexResp, error)
	//删除产品
	ProductSchemaTslImport(context.Context, *ProductSchemaTslImportReq) (*Empty, error)
	//获取产品信息列表
	ProductSchemaTslRead(context.Context, *ProductSchemaTslReadReq) (*ProductSchemaTslReadResp, error)
	//脚本管理
	ProductCustomRead(context.Context, *ProductCustomReadReq) (*ProductCustom, error)
	ProductCustomUpdate(context.Context, *ProductCustom) (*Empty, error)
	//新增产品
	ProductCategoryCreate(context.Context, *ProductCategory) (*WithID, error)
	//更新产品
	ProductCategoryUpdate(context.Context, *ProductCategory) (*Empty, error)
	//删除产品
	ProductCategoryDelete(context.Context, *WithID) (*Empty, error)
	//获取产品信息列表
	ProductCategoryIndex(context.Context, *ProductCategoryIndexReq) (*ProductCategoryIndexResp, error)
	//获取产品信息详情
	ProductCategoryRead(context.Context, *WithIDChildren) (*ProductCategory, error)
	//获取产品品类下的物模型列表,绑定的物模型会自动添加到该产品品类及子分类的产品中,并不支持删除
	ProductCategorySchemaIndex(context.Context, *ProductCategorySchemaIndexReq) (*ProductCategorySchemaIndexResp, error)
	ProductCategorySchemaMultiUpdate(context.Context, *ProductCategorySchemaMultiSaveReq) (*Empty, error)
	ProductCategorySchemaMultiCreate(context.Context, *ProductCategorySchemaMultiSaveReq) (*Empty, error)
	ProductCategorySchemaMultiDelete(context.Context, *ProductCategorySchemaMultiSaveReq) (*Empty, error)
	mustEmbedUnimplementedProductManageServer()
}

// UnimplementedProductManageServer must be embedded to have forward compatible implementations.
type UnimplementedProductManageServer struct {
}

func (UnimplementedProductManageServer) ProductInit(context.Context, *ProductInitReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductInit not implemented")
}
func (UnimplementedProductManageServer) ProductInfoCreate(context.Context, *ProductInfo) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductInfoCreate not implemented")
}
func (UnimplementedProductManageServer) ProductInfoUpdate(context.Context, *ProductInfo) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductInfoUpdate not implemented")
}
func (UnimplementedProductManageServer) ProductInfoDelete(context.Context, *ProductInfoDeleteReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductInfoDelete not implemented")
}
func (UnimplementedProductManageServer) ProductInfoIndex(context.Context, *ProductInfoIndexReq) (*ProductInfoIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductInfoIndex not implemented")
}
func (UnimplementedProductManageServer) ProductInfoRead(context.Context, *ProductInfoReadReq) (*ProductInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductInfoRead not implemented")
}
func (UnimplementedProductManageServer) ProductSchemaUpdate(context.Context, *ProductSchemaUpdateReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductSchemaUpdate not implemented")
}
func (UnimplementedProductManageServer) ProductSchemaCreate(context.Context, *ProductSchemaCreateReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductSchemaCreate not implemented")
}
func (UnimplementedProductManageServer) ProductSchemaMultiCreate(context.Context, *ProductSchemaMultiCreateReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductSchemaMultiCreate not implemented")
}
func (UnimplementedProductManageServer) ProductSchemaDelete(context.Context, *ProductSchemaDeleteReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductSchemaDelete not implemented")
}
func (UnimplementedProductManageServer) ProductSchemaIndex(context.Context, *ProductSchemaIndexReq) (*ProductSchemaIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductSchemaIndex not implemented")
}
func (UnimplementedProductManageServer) ProductSchemaTslImport(context.Context, *ProductSchemaTslImportReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductSchemaTslImport not implemented")
}
func (UnimplementedProductManageServer) ProductSchemaTslRead(context.Context, *ProductSchemaTslReadReq) (*ProductSchemaTslReadResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductSchemaTslRead not implemented")
}
func (UnimplementedProductManageServer) ProductCustomRead(context.Context, *ProductCustomReadReq) (*ProductCustom, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductCustomRead not implemented")
}
func (UnimplementedProductManageServer) ProductCustomUpdate(context.Context, *ProductCustom) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductCustomUpdate not implemented")
}
func (UnimplementedProductManageServer) ProductCategoryCreate(context.Context, *ProductCategory) (*WithID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductCategoryCreate not implemented")
}
func (UnimplementedProductManageServer) ProductCategoryUpdate(context.Context, *ProductCategory) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductCategoryUpdate not implemented")
}
func (UnimplementedProductManageServer) ProductCategoryDelete(context.Context, *WithID) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductCategoryDelete not implemented")
}
func (UnimplementedProductManageServer) ProductCategoryIndex(context.Context, *ProductCategoryIndexReq) (*ProductCategoryIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductCategoryIndex not implemented")
}
func (UnimplementedProductManageServer) ProductCategoryRead(context.Context, *WithIDChildren) (*ProductCategory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductCategoryRead not implemented")
}
func (UnimplementedProductManageServer) ProductCategorySchemaIndex(context.Context, *ProductCategorySchemaIndexReq) (*ProductCategorySchemaIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductCategorySchemaIndex not implemented")
}
func (UnimplementedProductManageServer) ProductCategorySchemaMultiUpdate(context.Context, *ProductCategorySchemaMultiSaveReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductCategorySchemaMultiUpdate not implemented")
}
func (UnimplementedProductManageServer) ProductCategorySchemaMultiCreate(context.Context, *ProductCategorySchemaMultiSaveReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductCategorySchemaMultiCreate not implemented")
}
func (UnimplementedProductManageServer) ProductCategorySchemaMultiDelete(context.Context, *ProductCategorySchemaMultiSaveReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductCategorySchemaMultiDelete not implemented")
}
func (UnimplementedProductManageServer) mustEmbedUnimplementedProductManageServer() {}

// UnsafeProductManageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductManageServer will
// result in compilation errors.
type UnsafeProductManageServer interface {
	mustEmbedUnimplementedProductManageServer()
}

func RegisterProductManageServer(s grpc.ServiceRegistrar, srv ProductManageServer) {
	s.RegisterService(&ProductManage_ServiceDesc, srv)
}

func _ProductManage_ProductInit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductInitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductManageServer).ProductInit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.ProductManage/productInit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductManageServer).ProductInit(ctx, req.(*ProductInitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductManage_ProductInfoCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductManageServer).ProductInfoCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.ProductManage/productInfoCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductManageServer).ProductInfoCreate(ctx, req.(*ProductInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductManage_ProductInfoUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductManageServer).ProductInfoUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.ProductManage/productInfoUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductManageServer).ProductInfoUpdate(ctx, req.(*ProductInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductManage_ProductInfoDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductInfoDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductManageServer).ProductInfoDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.ProductManage/productInfoDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductManageServer).ProductInfoDelete(ctx, req.(*ProductInfoDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductManage_ProductInfoIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductInfoIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductManageServer).ProductInfoIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.ProductManage/productInfoIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductManageServer).ProductInfoIndex(ctx, req.(*ProductInfoIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductManage_ProductInfoRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductInfoReadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductManageServer).ProductInfoRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.ProductManage/productInfoRead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductManageServer).ProductInfoRead(ctx, req.(*ProductInfoReadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductManage_ProductSchemaUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductSchemaUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductManageServer).ProductSchemaUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.ProductManage/productSchemaUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductManageServer).ProductSchemaUpdate(ctx, req.(*ProductSchemaUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductManage_ProductSchemaCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductSchemaCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductManageServer).ProductSchemaCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.ProductManage/productSchemaCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductManageServer).ProductSchemaCreate(ctx, req.(*ProductSchemaCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductManage_ProductSchemaMultiCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductSchemaMultiCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductManageServer).ProductSchemaMultiCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.ProductManage/productSchemaMultiCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductManageServer).ProductSchemaMultiCreate(ctx, req.(*ProductSchemaMultiCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductManage_ProductSchemaDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductSchemaDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductManageServer).ProductSchemaDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.ProductManage/productSchemaDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductManageServer).ProductSchemaDelete(ctx, req.(*ProductSchemaDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductManage_ProductSchemaIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductSchemaIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductManageServer).ProductSchemaIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.ProductManage/productSchemaIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductManageServer).ProductSchemaIndex(ctx, req.(*ProductSchemaIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductManage_ProductSchemaTslImport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductSchemaTslImportReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductManageServer).ProductSchemaTslImport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.ProductManage/productSchemaTslImport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductManageServer).ProductSchemaTslImport(ctx, req.(*ProductSchemaTslImportReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductManage_ProductSchemaTslRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductSchemaTslReadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductManageServer).ProductSchemaTslRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.ProductManage/productSchemaTslRead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductManageServer).ProductSchemaTslRead(ctx, req.(*ProductSchemaTslReadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductManage_ProductCustomRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductCustomReadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductManageServer).ProductCustomRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.ProductManage/productCustomRead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductManageServer).ProductCustomRead(ctx, req.(*ProductCustomReadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductManage_ProductCustomUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductCustom)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductManageServer).ProductCustomUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.ProductManage/productCustomUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductManageServer).ProductCustomUpdate(ctx, req.(*ProductCustom))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductManage_ProductCategoryCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductCategory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductManageServer).ProductCategoryCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.ProductManage/productCategoryCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductManageServer).ProductCategoryCreate(ctx, req.(*ProductCategory))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductManage_ProductCategoryUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductCategory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductManageServer).ProductCategoryUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.ProductManage/productCategoryUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductManageServer).ProductCategoryUpdate(ctx, req.(*ProductCategory))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductManage_ProductCategoryDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductManageServer).ProductCategoryDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.ProductManage/productCategoryDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductManageServer).ProductCategoryDelete(ctx, req.(*WithID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductManage_ProductCategoryIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductCategoryIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductManageServer).ProductCategoryIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.ProductManage/productCategoryIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductManageServer).ProductCategoryIndex(ctx, req.(*ProductCategoryIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductManage_ProductCategoryRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithIDChildren)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductManageServer).ProductCategoryRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.ProductManage/productCategoryRead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductManageServer).ProductCategoryRead(ctx, req.(*WithIDChildren))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductManage_ProductCategorySchemaIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductCategorySchemaIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductManageServer).ProductCategorySchemaIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.ProductManage/productCategorySchemaIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductManageServer).ProductCategorySchemaIndex(ctx, req.(*ProductCategorySchemaIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductManage_ProductCategorySchemaMultiUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductCategorySchemaMultiSaveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductManageServer).ProductCategorySchemaMultiUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.ProductManage/productCategorySchemaMultiUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductManageServer).ProductCategorySchemaMultiUpdate(ctx, req.(*ProductCategorySchemaMultiSaveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductManage_ProductCategorySchemaMultiCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductCategorySchemaMultiSaveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductManageServer).ProductCategorySchemaMultiCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.ProductManage/productCategorySchemaMultiCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductManageServer).ProductCategorySchemaMultiCreate(ctx, req.(*ProductCategorySchemaMultiSaveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductManage_ProductCategorySchemaMultiDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductCategorySchemaMultiSaveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductManageServer).ProductCategorySchemaMultiDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.ProductManage/productCategorySchemaMultiDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductManageServer).ProductCategorySchemaMultiDelete(ctx, req.(*ProductCategorySchemaMultiSaveReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductManage_ServiceDesc is the grpc.ServiceDesc for ProductManage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductManage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dm.ProductManage",
	HandlerType: (*ProductManageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "productInit",
			Handler:    _ProductManage_ProductInit_Handler,
		},
		{
			MethodName: "productInfoCreate",
			Handler:    _ProductManage_ProductInfoCreate_Handler,
		},
		{
			MethodName: "productInfoUpdate",
			Handler:    _ProductManage_ProductInfoUpdate_Handler,
		},
		{
			MethodName: "productInfoDelete",
			Handler:    _ProductManage_ProductInfoDelete_Handler,
		},
		{
			MethodName: "productInfoIndex",
			Handler:    _ProductManage_ProductInfoIndex_Handler,
		},
		{
			MethodName: "productInfoRead",
			Handler:    _ProductManage_ProductInfoRead_Handler,
		},
		{
			MethodName: "productSchemaUpdate",
			Handler:    _ProductManage_ProductSchemaUpdate_Handler,
		},
		{
			MethodName: "productSchemaCreate",
			Handler:    _ProductManage_ProductSchemaCreate_Handler,
		},
		{
			MethodName: "productSchemaMultiCreate",
			Handler:    _ProductManage_ProductSchemaMultiCreate_Handler,
		},
		{
			MethodName: "productSchemaDelete",
			Handler:    _ProductManage_ProductSchemaDelete_Handler,
		},
		{
			MethodName: "productSchemaIndex",
			Handler:    _ProductManage_ProductSchemaIndex_Handler,
		},
		{
			MethodName: "productSchemaTslImport",
			Handler:    _ProductManage_ProductSchemaTslImport_Handler,
		},
		{
			MethodName: "productSchemaTslRead",
			Handler:    _ProductManage_ProductSchemaTslRead_Handler,
		},
		{
			MethodName: "productCustomRead",
			Handler:    _ProductManage_ProductCustomRead_Handler,
		},
		{
			MethodName: "productCustomUpdate",
			Handler:    _ProductManage_ProductCustomUpdate_Handler,
		},
		{
			MethodName: "productCategoryCreate",
			Handler:    _ProductManage_ProductCategoryCreate_Handler,
		},
		{
			MethodName: "productCategoryUpdate",
			Handler:    _ProductManage_ProductCategoryUpdate_Handler,
		},
		{
			MethodName: "productCategoryDelete",
			Handler:    _ProductManage_ProductCategoryDelete_Handler,
		},
		{
			MethodName: "productCategoryIndex",
			Handler:    _ProductManage_ProductCategoryIndex_Handler,
		},
		{
			MethodName: "productCategoryRead",
			Handler:    _ProductManage_ProductCategoryRead_Handler,
		},
		{
			MethodName: "productCategorySchemaIndex",
			Handler:    _ProductManage_ProductCategorySchemaIndex_Handler,
		},
		{
			MethodName: "productCategorySchemaMultiUpdate",
			Handler:    _ProductManage_ProductCategorySchemaMultiUpdate_Handler,
		},
		{
			MethodName: "productCategorySchemaMultiCreate",
			Handler:    _ProductManage_ProductCategorySchemaMultiCreate_Handler,
		},
		{
			MethodName: "productCategorySchemaMultiDelete",
			Handler:    _ProductManage_ProductCategorySchemaMultiDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/dm.proto",
}

// SchemaManageClient is the client API for SchemaManage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SchemaManageClient interface {
	CommonSchemaInit(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	//更新产品物模型
	CommonSchemaUpdate(ctx context.Context, in *CommonSchemaUpdateReq, opts ...grpc.CallOption) (*Empty, error)
	//新增产品
	CommonSchemaCreate(ctx context.Context, in *CommonSchemaCreateReq, opts ...grpc.CallOption) (*Empty, error)
	//删除产品
	CommonSchemaDelete(ctx context.Context, in *WithID, opts ...grpc.CallOption) (*Empty, error)
	//获取产品信息列表
	CommonSchemaIndex(ctx context.Context, in *CommonSchemaIndexReq, opts ...grpc.CallOption) (*CommonSchemaIndexResp, error)
}

type schemaManageClient struct {
	cc grpc.ClientConnInterface
}

func NewSchemaManageClient(cc grpc.ClientConnInterface) SchemaManageClient {
	return &schemaManageClient{cc}
}

func (c *schemaManageClient) CommonSchemaInit(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/dm.SchemaManage/commonSchemaInit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schemaManageClient) CommonSchemaUpdate(ctx context.Context, in *CommonSchemaUpdateReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/dm.SchemaManage/commonSchemaUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schemaManageClient) CommonSchemaCreate(ctx context.Context, in *CommonSchemaCreateReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/dm.SchemaManage/commonSchemaCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schemaManageClient) CommonSchemaDelete(ctx context.Context, in *WithID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/dm.SchemaManage/commonSchemaDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schemaManageClient) CommonSchemaIndex(ctx context.Context, in *CommonSchemaIndexReq, opts ...grpc.CallOption) (*CommonSchemaIndexResp, error) {
	out := new(CommonSchemaIndexResp)
	err := c.cc.Invoke(ctx, "/dm.SchemaManage/commonSchemaIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SchemaManageServer is the server API for SchemaManage service.
// All implementations must embed UnimplementedSchemaManageServer
// for forward compatibility
type SchemaManageServer interface {
	CommonSchemaInit(context.Context, *Empty) (*Empty, error)
	//更新产品物模型
	CommonSchemaUpdate(context.Context, *CommonSchemaUpdateReq) (*Empty, error)
	//新增产品
	CommonSchemaCreate(context.Context, *CommonSchemaCreateReq) (*Empty, error)
	//删除产品
	CommonSchemaDelete(context.Context, *WithID) (*Empty, error)
	//获取产品信息列表
	CommonSchemaIndex(context.Context, *CommonSchemaIndexReq) (*CommonSchemaIndexResp, error)
	mustEmbedUnimplementedSchemaManageServer()
}

// UnimplementedSchemaManageServer must be embedded to have forward compatible implementations.
type UnimplementedSchemaManageServer struct {
}

func (UnimplementedSchemaManageServer) CommonSchemaInit(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommonSchemaInit not implemented")
}
func (UnimplementedSchemaManageServer) CommonSchemaUpdate(context.Context, *CommonSchemaUpdateReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommonSchemaUpdate not implemented")
}
func (UnimplementedSchemaManageServer) CommonSchemaCreate(context.Context, *CommonSchemaCreateReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommonSchemaCreate not implemented")
}
func (UnimplementedSchemaManageServer) CommonSchemaDelete(context.Context, *WithID) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommonSchemaDelete not implemented")
}
func (UnimplementedSchemaManageServer) CommonSchemaIndex(context.Context, *CommonSchemaIndexReq) (*CommonSchemaIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommonSchemaIndex not implemented")
}
func (UnimplementedSchemaManageServer) mustEmbedUnimplementedSchemaManageServer() {}

// UnsafeSchemaManageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SchemaManageServer will
// result in compilation errors.
type UnsafeSchemaManageServer interface {
	mustEmbedUnimplementedSchemaManageServer()
}

func RegisterSchemaManageServer(s grpc.ServiceRegistrar, srv SchemaManageServer) {
	s.RegisterService(&SchemaManage_ServiceDesc, srv)
}

func _SchemaManage_CommonSchemaInit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaManageServer).CommonSchemaInit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.SchemaManage/commonSchemaInit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaManageServer).CommonSchemaInit(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchemaManage_CommonSchemaUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonSchemaUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaManageServer).CommonSchemaUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.SchemaManage/commonSchemaUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaManageServer).CommonSchemaUpdate(ctx, req.(*CommonSchemaUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchemaManage_CommonSchemaCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonSchemaCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaManageServer).CommonSchemaCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.SchemaManage/commonSchemaCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaManageServer).CommonSchemaCreate(ctx, req.(*CommonSchemaCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchemaManage_CommonSchemaDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaManageServer).CommonSchemaDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.SchemaManage/commonSchemaDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaManageServer).CommonSchemaDelete(ctx, req.(*WithID))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchemaManage_CommonSchemaIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonSchemaIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaManageServer).CommonSchemaIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.SchemaManage/commonSchemaIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaManageServer).CommonSchemaIndex(ctx, req.(*CommonSchemaIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SchemaManage_ServiceDesc is the grpc.ServiceDesc for SchemaManage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SchemaManage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dm.SchemaManage",
	HandlerType: (*SchemaManageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "commonSchemaInit",
			Handler:    _SchemaManage_CommonSchemaInit_Handler,
		},
		{
			MethodName: "commonSchemaUpdate",
			Handler:    _SchemaManage_CommonSchemaUpdate_Handler,
		},
		{
			MethodName: "commonSchemaCreate",
			Handler:    _SchemaManage_CommonSchemaCreate_Handler,
		},
		{
			MethodName: "commonSchemaDelete",
			Handler:    _SchemaManage_CommonSchemaDelete_Handler,
		},
		{
			MethodName: "commonSchemaIndex",
			Handler:    _SchemaManage_CommonSchemaIndex_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/dm.proto",
}

// ProtocolManageClient is the client API for ProtocolManage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProtocolManageClient interface {
	//协议列表
	ProtocolInfoIndex(ctx context.Context, in *ProtocolInfoIndexReq, opts ...grpc.CallOption) (*ProtocolInfoIndexResp, error)
	//协议详情
	ProtocolInfoRead(ctx context.Context, in *WithIDCode, opts ...grpc.CallOption) (*ProtocolInfo, error)
	//协议创建
	ProtocolInfoCreate(ctx context.Context, in *ProtocolInfo, opts ...grpc.CallOption) (*WithID, error)
	//协议更新
	ProtocolInfoUpdate(ctx context.Context, in *ProtocolInfo, opts ...grpc.CallOption) (*Empty, error)
	//协议删除
	ProtocolInfoDelete(ctx context.Context, in *WithID, opts ...grpc.CallOption) (*Empty, error)
	//更新服务状态,只给服务调用
	ProtocolServiceUpdate(ctx context.Context, in *ProtocolService, opts ...grpc.CallOption) (*Empty, error)
	ProtocolServiceDelete(ctx context.Context, in *WithID, opts ...grpc.CallOption) (*Empty, error)
	ProtocolServiceIndex(ctx context.Context, in *ProtocolServiceIndexReq, opts ...grpc.CallOption) (*ProtocolServiceIndexResp, error)
}

type protocolManageClient struct {
	cc grpc.ClientConnInterface
}

func NewProtocolManageClient(cc grpc.ClientConnInterface) ProtocolManageClient {
	return &protocolManageClient{cc}
}

func (c *protocolManageClient) ProtocolInfoIndex(ctx context.Context, in *ProtocolInfoIndexReq, opts ...grpc.CallOption) (*ProtocolInfoIndexResp, error) {
	out := new(ProtocolInfoIndexResp)
	err := c.cc.Invoke(ctx, "/dm.ProtocolManage/protocolInfoIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocolManageClient) ProtocolInfoRead(ctx context.Context, in *WithIDCode, opts ...grpc.CallOption) (*ProtocolInfo, error) {
	out := new(ProtocolInfo)
	err := c.cc.Invoke(ctx, "/dm.ProtocolManage/protocolInfoRead", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocolManageClient) ProtocolInfoCreate(ctx context.Context, in *ProtocolInfo, opts ...grpc.CallOption) (*WithID, error) {
	out := new(WithID)
	err := c.cc.Invoke(ctx, "/dm.ProtocolManage/protocolInfoCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocolManageClient) ProtocolInfoUpdate(ctx context.Context, in *ProtocolInfo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/dm.ProtocolManage/protocolInfoUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocolManageClient) ProtocolInfoDelete(ctx context.Context, in *WithID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/dm.ProtocolManage/protocolInfoDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocolManageClient) ProtocolServiceUpdate(ctx context.Context, in *ProtocolService, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/dm.ProtocolManage/protocolServiceUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocolManageClient) ProtocolServiceDelete(ctx context.Context, in *WithID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/dm.ProtocolManage/protocolServiceDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocolManageClient) ProtocolServiceIndex(ctx context.Context, in *ProtocolServiceIndexReq, opts ...grpc.CallOption) (*ProtocolServiceIndexResp, error) {
	out := new(ProtocolServiceIndexResp)
	err := c.cc.Invoke(ctx, "/dm.ProtocolManage/protocolServiceIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProtocolManageServer is the server API for ProtocolManage service.
// All implementations must embed UnimplementedProtocolManageServer
// for forward compatibility
type ProtocolManageServer interface {
	//协议列表
	ProtocolInfoIndex(context.Context, *ProtocolInfoIndexReq) (*ProtocolInfoIndexResp, error)
	//协议详情
	ProtocolInfoRead(context.Context, *WithIDCode) (*ProtocolInfo, error)
	//协议创建
	ProtocolInfoCreate(context.Context, *ProtocolInfo) (*WithID, error)
	//协议更新
	ProtocolInfoUpdate(context.Context, *ProtocolInfo) (*Empty, error)
	//协议删除
	ProtocolInfoDelete(context.Context, *WithID) (*Empty, error)
	//更新服务状态,只给服务调用
	ProtocolServiceUpdate(context.Context, *ProtocolService) (*Empty, error)
	ProtocolServiceDelete(context.Context, *WithID) (*Empty, error)
	ProtocolServiceIndex(context.Context, *ProtocolServiceIndexReq) (*ProtocolServiceIndexResp, error)
	mustEmbedUnimplementedProtocolManageServer()
}

// UnimplementedProtocolManageServer must be embedded to have forward compatible implementations.
type UnimplementedProtocolManageServer struct {
}

func (UnimplementedProtocolManageServer) ProtocolInfoIndex(context.Context, *ProtocolInfoIndexReq) (*ProtocolInfoIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProtocolInfoIndex not implemented")
}
func (UnimplementedProtocolManageServer) ProtocolInfoRead(context.Context, *WithIDCode) (*ProtocolInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProtocolInfoRead not implemented")
}
func (UnimplementedProtocolManageServer) ProtocolInfoCreate(context.Context, *ProtocolInfo) (*WithID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProtocolInfoCreate not implemented")
}
func (UnimplementedProtocolManageServer) ProtocolInfoUpdate(context.Context, *ProtocolInfo) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProtocolInfoUpdate not implemented")
}
func (UnimplementedProtocolManageServer) ProtocolInfoDelete(context.Context, *WithID) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProtocolInfoDelete not implemented")
}
func (UnimplementedProtocolManageServer) ProtocolServiceUpdate(context.Context, *ProtocolService) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProtocolServiceUpdate not implemented")
}
func (UnimplementedProtocolManageServer) ProtocolServiceDelete(context.Context, *WithID) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProtocolServiceDelete not implemented")
}
func (UnimplementedProtocolManageServer) ProtocolServiceIndex(context.Context, *ProtocolServiceIndexReq) (*ProtocolServiceIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProtocolServiceIndex not implemented")
}
func (UnimplementedProtocolManageServer) mustEmbedUnimplementedProtocolManageServer() {}

// UnsafeProtocolManageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProtocolManageServer will
// result in compilation errors.
type UnsafeProtocolManageServer interface {
	mustEmbedUnimplementedProtocolManageServer()
}

func RegisterProtocolManageServer(s grpc.ServiceRegistrar, srv ProtocolManageServer) {
	s.RegisterService(&ProtocolManage_ServiceDesc, srv)
}

func _ProtocolManage_ProtocolInfoIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProtocolInfoIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolManageServer).ProtocolInfoIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.ProtocolManage/protocolInfoIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolManageServer).ProtocolInfoIndex(ctx, req.(*ProtocolInfoIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtocolManage_ProtocolInfoRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithIDCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolManageServer).ProtocolInfoRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.ProtocolManage/protocolInfoRead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolManageServer).ProtocolInfoRead(ctx, req.(*WithIDCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtocolManage_ProtocolInfoCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProtocolInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolManageServer).ProtocolInfoCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.ProtocolManage/protocolInfoCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolManageServer).ProtocolInfoCreate(ctx, req.(*ProtocolInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtocolManage_ProtocolInfoUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProtocolInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolManageServer).ProtocolInfoUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.ProtocolManage/protocolInfoUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolManageServer).ProtocolInfoUpdate(ctx, req.(*ProtocolInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtocolManage_ProtocolInfoDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolManageServer).ProtocolInfoDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.ProtocolManage/protocolInfoDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolManageServer).ProtocolInfoDelete(ctx, req.(*WithID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtocolManage_ProtocolServiceUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProtocolService)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolManageServer).ProtocolServiceUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.ProtocolManage/protocolServiceUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolManageServer).ProtocolServiceUpdate(ctx, req.(*ProtocolService))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtocolManage_ProtocolServiceDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolManageServer).ProtocolServiceDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.ProtocolManage/protocolServiceDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolManageServer).ProtocolServiceDelete(ctx, req.(*WithID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtocolManage_ProtocolServiceIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProtocolServiceIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolManageServer).ProtocolServiceIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.ProtocolManage/protocolServiceIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolManageServer).ProtocolServiceIndex(ctx, req.(*ProtocolServiceIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ProtocolManage_ServiceDesc is the grpc.ServiceDesc for ProtocolManage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProtocolManage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dm.ProtocolManage",
	HandlerType: (*ProtocolManageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "protocolInfoIndex",
			Handler:    _ProtocolManage_ProtocolInfoIndex_Handler,
		},
		{
			MethodName: "protocolInfoRead",
			Handler:    _ProtocolManage_ProtocolInfoRead_Handler,
		},
		{
			MethodName: "protocolInfoCreate",
			Handler:    _ProtocolManage_ProtocolInfoCreate_Handler,
		},
		{
			MethodName: "protocolInfoUpdate",
			Handler:    _ProtocolManage_ProtocolInfoUpdate_Handler,
		},
		{
			MethodName: "protocolInfoDelete",
			Handler:    _ProtocolManage_ProtocolInfoDelete_Handler,
		},
		{
			MethodName: "protocolServiceUpdate",
			Handler:    _ProtocolManage_ProtocolServiceUpdate_Handler,
		},
		{
			MethodName: "protocolServiceDelete",
			Handler:    _ProtocolManage_ProtocolServiceDelete_Handler,
		},
		{
			MethodName: "protocolServiceIndex",
			Handler:    _ProtocolManage_ProtocolServiceIndex_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/dm.proto",
}

// DeviceGroupClient is the client API for DeviceGroup service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeviceGroupClient interface {
	//创建分组
	GroupInfoCreate(ctx context.Context, in *GroupInfo, opts ...grpc.CallOption) (*WithID, error)
	//获取分组信息列表
	GroupInfoIndex(ctx context.Context, in *GroupInfoIndexReq, opts ...grpc.CallOption) (*GroupInfoIndexResp, error)
	//获取分组信息详情
	GroupInfoRead(ctx context.Context, in *WithIDChildren, opts ...grpc.CallOption) (*GroupInfo, error)
	//更新分组
	GroupInfoUpdate(ctx context.Context, in *GroupInfo, opts ...grpc.CallOption) (*Empty, error)
	//删除分组
	GroupInfoDelete(ctx context.Context, in *WithID, opts ...grpc.CallOption) (*Empty, error)
	//创建分组设备
	GroupDeviceMultiCreate(ctx context.Context, in *GroupDeviceMultiSaveReq, opts ...grpc.CallOption) (*Empty, error)
	//更新分组设备
	GroupDeviceMultiUpdate(ctx context.Context, in *GroupDeviceMultiSaveReq, opts ...grpc.CallOption) (*Empty, error)
	//获取分组设备信息列表
	GroupDeviceIndex(ctx context.Context, in *GroupDeviceIndexReq, opts ...grpc.CallOption) (*GroupDeviceIndexResp, error)
	//删除分组设备
	GroupDeviceMultiDelete(ctx context.Context, in *GroupDeviceMultiDeleteReq, opts ...grpc.CallOption) (*Empty, error)
}

type deviceGroupClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceGroupClient(cc grpc.ClientConnInterface) DeviceGroupClient {
	return &deviceGroupClient{cc}
}

func (c *deviceGroupClient) GroupInfoCreate(ctx context.Context, in *GroupInfo, opts ...grpc.CallOption) (*WithID, error) {
	out := new(WithID)
	err := c.cc.Invoke(ctx, "/dm.DeviceGroup/groupInfoCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceGroupClient) GroupInfoIndex(ctx context.Context, in *GroupInfoIndexReq, opts ...grpc.CallOption) (*GroupInfoIndexResp, error) {
	out := new(GroupInfoIndexResp)
	err := c.cc.Invoke(ctx, "/dm.DeviceGroup/groupInfoIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceGroupClient) GroupInfoRead(ctx context.Context, in *WithIDChildren, opts ...grpc.CallOption) (*GroupInfo, error) {
	out := new(GroupInfo)
	err := c.cc.Invoke(ctx, "/dm.DeviceGroup/groupInfoRead", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceGroupClient) GroupInfoUpdate(ctx context.Context, in *GroupInfo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/dm.DeviceGroup/groupInfoUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceGroupClient) GroupInfoDelete(ctx context.Context, in *WithID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/dm.DeviceGroup/groupInfoDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceGroupClient) GroupDeviceMultiCreate(ctx context.Context, in *GroupDeviceMultiSaveReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/dm.DeviceGroup/groupDeviceMultiCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceGroupClient) GroupDeviceMultiUpdate(ctx context.Context, in *GroupDeviceMultiSaveReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/dm.DeviceGroup/groupDeviceMultiUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceGroupClient) GroupDeviceIndex(ctx context.Context, in *GroupDeviceIndexReq, opts ...grpc.CallOption) (*GroupDeviceIndexResp, error) {
	out := new(GroupDeviceIndexResp)
	err := c.cc.Invoke(ctx, "/dm.DeviceGroup/groupDeviceIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceGroupClient) GroupDeviceMultiDelete(ctx context.Context, in *GroupDeviceMultiDeleteReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/dm.DeviceGroup/groupDeviceMultiDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeviceGroupServer is the server API for DeviceGroup service.
// All implementations must embed UnimplementedDeviceGroupServer
// for forward compatibility
type DeviceGroupServer interface {
	//创建分组
	GroupInfoCreate(context.Context, *GroupInfo) (*WithID, error)
	//获取分组信息列表
	GroupInfoIndex(context.Context, *GroupInfoIndexReq) (*GroupInfoIndexResp, error)
	//获取分组信息详情
	GroupInfoRead(context.Context, *WithIDChildren) (*GroupInfo, error)
	//更新分组
	GroupInfoUpdate(context.Context, *GroupInfo) (*Empty, error)
	//删除分组
	GroupInfoDelete(context.Context, *WithID) (*Empty, error)
	//创建分组设备
	GroupDeviceMultiCreate(context.Context, *GroupDeviceMultiSaveReq) (*Empty, error)
	//更新分组设备
	GroupDeviceMultiUpdate(context.Context, *GroupDeviceMultiSaveReq) (*Empty, error)
	//获取分组设备信息列表
	GroupDeviceIndex(context.Context, *GroupDeviceIndexReq) (*GroupDeviceIndexResp, error)
	//删除分组设备
	GroupDeviceMultiDelete(context.Context, *GroupDeviceMultiDeleteReq) (*Empty, error)
	mustEmbedUnimplementedDeviceGroupServer()
}

// UnimplementedDeviceGroupServer must be embedded to have forward compatible implementations.
type UnimplementedDeviceGroupServer struct {
}

func (UnimplementedDeviceGroupServer) GroupInfoCreate(context.Context, *GroupInfo) (*WithID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupInfoCreate not implemented")
}
func (UnimplementedDeviceGroupServer) GroupInfoIndex(context.Context, *GroupInfoIndexReq) (*GroupInfoIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupInfoIndex not implemented")
}
func (UnimplementedDeviceGroupServer) GroupInfoRead(context.Context, *WithIDChildren) (*GroupInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupInfoRead not implemented")
}
func (UnimplementedDeviceGroupServer) GroupInfoUpdate(context.Context, *GroupInfo) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupInfoUpdate not implemented")
}
func (UnimplementedDeviceGroupServer) GroupInfoDelete(context.Context, *WithID) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupInfoDelete not implemented")
}
func (UnimplementedDeviceGroupServer) GroupDeviceMultiCreate(context.Context, *GroupDeviceMultiSaveReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupDeviceMultiCreate not implemented")
}
func (UnimplementedDeviceGroupServer) GroupDeviceMultiUpdate(context.Context, *GroupDeviceMultiSaveReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupDeviceMultiUpdate not implemented")
}
func (UnimplementedDeviceGroupServer) GroupDeviceIndex(context.Context, *GroupDeviceIndexReq) (*GroupDeviceIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupDeviceIndex not implemented")
}
func (UnimplementedDeviceGroupServer) GroupDeviceMultiDelete(context.Context, *GroupDeviceMultiDeleteReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupDeviceMultiDelete not implemented")
}
func (UnimplementedDeviceGroupServer) mustEmbedUnimplementedDeviceGroupServer() {}

// UnsafeDeviceGroupServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeviceGroupServer will
// result in compilation errors.
type UnsafeDeviceGroupServer interface {
	mustEmbedUnimplementedDeviceGroupServer()
}

func RegisterDeviceGroupServer(s grpc.ServiceRegistrar, srv DeviceGroupServer) {
	s.RegisterService(&DeviceGroup_ServiceDesc, srv)
}

func _DeviceGroup_GroupInfoCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceGroupServer).GroupInfoCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.DeviceGroup/groupInfoCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceGroupServer).GroupInfoCreate(ctx, req.(*GroupInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceGroup_GroupInfoIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupInfoIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceGroupServer).GroupInfoIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.DeviceGroup/groupInfoIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceGroupServer).GroupInfoIndex(ctx, req.(*GroupInfoIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceGroup_GroupInfoRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithIDChildren)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceGroupServer).GroupInfoRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.DeviceGroup/groupInfoRead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceGroupServer).GroupInfoRead(ctx, req.(*WithIDChildren))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceGroup_GroupInfoUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceGroupServer).GroupInfoUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.DeviceGroup/groupInfoUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceGroupServer).GroupInfoUpdate(ctx, req.(*GroupInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceGroup_GroupInfoDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceGroupServer).GroupInfoDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.DeviceGroup/groupInfoDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceGroupServer).GroupInfoDelete(ctx, req.(*WithID))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceGroup_GroupDeviceMultiCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupDeviceMultiSaveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceGroupServer).GroupDeviceMultiCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.DeviceGroup/groupDeviceMultiCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceGroupServer).GroupDeviceMultiCreate(ctx, req.(*GroupDeviceMultiSaveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceGroup_GroupDeviceMultiUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupDeviceMultiSaveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceGroupServer).GroupDeviceMultiUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.DeviceGroup/groupDeviceMultiUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceGroupServer).GroupDeviceMultiUpdate(ctx, req.(*GroupDeviceMultiSaveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceGroup_GroupDeviceIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupDeviceIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceGroupServer).GroupDeviceIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.DeviceGroup/groupDeviceIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceGroupServer).GroupDeviceIndex(ctx, req.(*GroupDeviceIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceGroup_GroupDeviceMultiDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupDeviceMultiDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceGroupServer).GroupDeviceMultiDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.DeviceGroup/groupDeviceMultiDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceGroupServer).GroupDeviceMultiDelete(ctx, req.(*GroupDeviceMultiDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// DeviceGroup_ServiceDesc is the grpc.ServiceDesc for DeviceGroup service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeviceGroup_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dm.DeviceGroup",
	HandlerType: (*DeviceGroupServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "groupInfoCreate",
			Handler:    _DeviceGroup_GroupInfoCreate_Handler,
		},
		{
			MethodName: "groupInfoIndex",
			Handler:    _DeviceGroup_GroupInfoIndex_Handler,
		},
		{
			MethodName: "groupInfoRead",
			Handler:    _DeviceGroup_GroupInfoRead_Handler,
		},
		{
			MethodName: "groupInfoUpdate",
			Handler:    _DeviceGroup_GroupInfoUpdate_Handler,
		},
		{
			MethodName: "groupInfoDelete",
			Handler:    _DeviceGroup_GroupInfoDelete_Handler,
		},
		{
			MethodName: "groupDeviceMultiCreate",
			Handler:    _DeviceGroup_GroupDeviceMultiCreate_Handler,
		},
		{
			MethodName: "groupDeviceMultiUpdate",
			Handler:    _DeviceGroup_GroupDeviceMultiUpdate_Handler,
		},
		{
			MethodName: "groupDeviceIndex",
			Handler:    _DeviceGroup_GroupDeviceIndex_Handler,
		},
		{
			MethodName: "groupDeviceMultiDelete",
			Handler:    _DeviceGroup_GroupDeviceMultiDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/dm.proto",
}

// RemoteConfigClient is the client API for RemoteConfig service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RemoteConfigClient interface {
	RemoteConfigCreate(ctx context.Context, in *RemoteConfigCreateReq, opts ...grpc.CallOption) (*Empty, error)
	RemoteConfigIndex(ctx context.Context, in *RemoteConfigIndexReq, opts ...grpc.CallOption) (*RemoteConfigIndexResp, error)
	RemoteConfigPushAll(ctx context.Context, in *RemoteConfigPushAllReq, opts ...grpc.CallOption) (*Empty, error)
	RemoteConfigLastRead(ctx context.Context, in *RemoteConfigLastReadReq, opts ...grpc.CallOption) (*RemoteConfigLastReadResp, error)
}

type remoteConfigClient struct {
	cc grpc.ClientConnInterface
}

func NewRemoteConfigClient(cc grpc.ClientConnInterface) RemoteConfigClient {
	return &remoteConfigClient{cc}
}

func (c *remoteConfigClient) RemoteConfigCreate(ctx context.Context, in *RemoteConfigCreateReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/dm.RemoteConfig/RemoteConfigCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteConfigClient) RemoteConfigIndex(ctx context.Context, in *RemoteConfigIndexReq, opts ...grpc.CallOption) (*RemoteConfigIndexResp, error) {
	out := new(RemoteConfigIndexResp)
	err := c.cc.Invoke(ctx, "/dm.RemoteConfig/RemoteConfigIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteConfigClient) RemoteConfigPushAll(ctx context.Context, in *RemoteConfigPushAllReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/dm.RemoteConfig/RemoteConfigPushAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteConfigClient) RemoteConfigLastRead(ctx context.Context, in *RemoteConfigLastReadReq, opts ...grpc.CallOption) (*RemoteConfigLastReadResp, error) {
	out := new(RemoteConfigLastReadResp)
	err := c.cc.Invoke(ctx, "/dm.RemoteConfig/RemoteConfigLastRead", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RemoteConfigServer is the server API for RemoteConfig service.
// All implementations must embed UnimplementedRemoteConfigServer
// for forward compatibility
type RemoteConfigServer interface {
	RemoteConfigCreate(context.Context, *RemoteConfigCreateReq) (*Empty, error)
	RemoteConfigIndex(context.Context, *RemoteConfigIndexReq) (*RemoteConfigIndexResp, error)
	RemoteConfigPushAll(context.Context, *RemoteConfigPushAllReq) (*Empty, error)
	RemoteConfigLastRead(context.Context, *RemoteConfigLastReadReq) (*RemoteConfigLastReadResp, error)
	mustEmbedUnimplementedRemoteConfigServer()
}

// UnimplementedRemoteConfigServer must be embedded to have forward compatible implementations.
type UnimplementedRemoteConfigServer struct {
}

func (UnimplementedRemoteConfigServer) RemoteConfigCreate(context.Context, *RemoteConfigCreateReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoteConfigCreate not implemented")
}
func (UnimplementedRemoteConfigServer) RemoteConfigIndex(context.Context, *RemoteConfigIndexReq) (*RemoteConfigIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoteConfigIndex not implemented")
}
func (UnimplementedRemoteConfigServer) RemoteConfigPushAll(context.Context, *RemoteConfigPushAllReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoteConfigPushAll not implemented")
}
func (UnimplementedRemoteConfigServer) RemoteConfigLastRead(context.Context, *RemoteConfigLastReadReq) (*RemoteConfigLastReadResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoteConfigLastRead not implemented")
}
func (UnimplementedRemoteConfigServer) mustEmbedUnimplementedRemoteConfigServer() {}

// UnsafeRemoteConfigServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RemoteConfigServer will
// result in compilation errors.
type UnsafeRemoteConfigServer interface {
	mustEmbedUnimplementedRemoteConfigServer()
}

func RegisterRemoteConfigServer(s grpc.ServiceRegistrar, srv RemoteConfigServer) {
	s.RegisterService(&RemoteConfig_ServiceDesc, srv)
}

func _RemoteConfig_RemoteConfigCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoteConfigCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteConfigServer).RemoteConfigCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.RemoteConfig/RemoteConfigCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteConfigServer).RemoteConfigCreate(ctx, req.(*RemoteConfigCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteConfig_RemoteConfigIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoteConfigIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteConfigServer).RemoteConfigIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.RemoteConfig/RemoteConfigIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteConfigServer).RemoteConfigIndex(ctx, req.(*RemoteConfigIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteConfig_RemoteConfigPushAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoteConfigPushAllReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteConfigServer).RemoteConfigPushAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.RemoteConfig/RemoteConfigPushAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteConfigServer).RemoteConfigPushAll(ctx, req.(*RemoteConfigPushAllReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteConfig_RemoteConfigLastRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoteConfigLastReadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteConfigServer).RemoteConfigLastRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.RemoteConfig/RemoteConfigLastRead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteConfigServer).RemoteConfigLastRead(ctx, req.(*RemoteConfigLastReadReq))
	}
	return interceptor(ctx, in, info, handler)
}

// RemoteConfig_ServiceDesc is the grpc.ServiceDesc for RemoteConfig service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RemoteConfig_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dm.RemoteConfig",
	HandlerType: (*RemoteConfigServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RemoteConfigCreate",
			Handler:    _RemoteConfig_RemoteConfigCreate_Handler,
		},
		{
			MethodName: "RemoteConfigIndex",
			Handler:    _RemoteConfig_RemoteConfigIndex_Handler,
		},
		{
			MethodName: "RemoteConfigPushAll",
			Handler:    _RemoteConfig_RemoteConfigPushAll_Handler,
		},
		{
			MethodName: "RemoteConfigLastRead",
			Handler:    _RemoteConfig_RemoteConfigLastRead_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/dm.proto",
}

// DeviceMsgClient is the client API for DeviceMsg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeviceMsgClient interface {
	//获取设备sdk调试日志
	SdkLogIndex(ctx context.Context, in *SdkLogIndexReq, opts ...grpc.CallOption) (*SdkLogIndexResp, error)
	//获取设备调试信息记录登入登出,操作
	HubLogIndex(ctx context.Context, in *HubLogIndexReq, opts ...grpc.CallOption) (*HubLogIndexResp, error)
	SendLogIndex(ctx context.Context, in *SendLogIndexReq, opts ...grpc.CallOption) (*SendLogIndexResp, error)
	StatusLogIndex(ctx context.Context, in *StatusLogIndexReq, opts ...grpc.CallOption) (*StatusLogIndexResp, error)
	//获取设备数据信息
	PropertyLogLatestIndex(ctx context.Context, in *PropertyLogLatestIndexReq, opts ...grpc.CallOption) (*PropertyLogIndexResp, error)
	//获取设备数据信息
	PropertyLogIndex(ctx context.Context, in *PropertyLogIndexReq, opts ...grpc.CallOption) (*PropertyLogIndexResp, error)
	//获取设备数据信息
	EventLogIndex(ctx context.Context, in *EventLogIndexReq, opts ...grpc.CallOption) (*EventLogIndexResp, error)
	//获取设备影子列表
	ShadowIndex(ctx context.Context, in *PropertyLogLatestIndexReq, opts ...grpc.CallOption) (*ShadowIndexResp, error)
	//获取网关可以绑定的子设备列表
	GatewayCanBindIndex(ctx context.Context, in *GatewayCanBindIndexReq, opts ...grpc.CallOption) (*GatewayCanBindIndexResp, error)
}

type deviceMsgClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceMsgClient(cc grpc.ClientConnInterface) DeviceMsgClient {
	return &deviceMsgClient{cc}
}

func (c *deviceMsgClient) SdkLogIndex(ctx context.Context, in *SdkLogIndexReq, opts ...grpc.CallOption) (*SdkLogIndexResp, error) {
	out := new(SdkLogIndexResp)
	err := c.cc.Invoke(ctx, "/dm.DeviceMsg/sdkLogIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceMsgClient) HubLogIndex(ctx context.Context, in *HubLogIndexReq, opts ...grpc.CallOption) (*HubLogIndexResp, error) {
	out := new(HubLogIndexResp)
	err := c.cc.Invoke(ctx, "/dm.DeviceMsg/hubLogIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceMsgClient) SendLogIndex(ctx context.Context, in *SendLogIndexReq, opts ...grpc.CallOption) (*SendLogIndexResp, error) {
	out := new(SendLogIndexResp)
	err := c.cc.Invoke(ctx, "/dm.DeviceMsg/sendLogIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceMsgClient) StatusLogIndex(ctx context.Context, in *StatusLogIndexReq, opts ...grpc.CallOption) (*StatusLogIndexResp, error) {
	out := new(StatusLogIndexResp)
	err := c.cc.Invoke(ctx, "/dm.DeviceMsg/statusLogIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceMsgClient) PropertyLogLatestIndex(ctx context.Context, in *PropertyLogLatestIndexReq, opts ...grpc.CallOption) (*PropertyLogIndexResp, error) {
	out := new(PropertyLogIndexResp)
	err := c.cc.Invoke(ctx, "/dm.DeviceMsg/propertyLogLatestIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceMsgClient) PropertyLogIndex(ctx context.Context, in *PropertyLogIndexReq, opts ...grpc.CallOption) (*PropertyLogIndexResp, error) {
	out := new(PropertyLogIndexResp)
	err := c.cc.Invoke(ctx, "/dm.DeviceMsg/propertyLogIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceMsgClient) EventLogIndex(ctx context.Context, in *EventLogIndexReq, opts ...grpc.CallOption) (*EventLogIndexResp, error) {
	out := new(EventLogIndexResp)
	err := c.cc.Invoke(ctx, "/dm.DeviceMsg/eventLogIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceMsgClient) ShadowIndex(ctx context.Context, in *PropertyLogLatestIndexReq, opts ...grpc.CallOption) (*ShadowIndexResp, error) {
	out := new(ShadowIndexResp)
	err := c.cc.Invoke(ctx, "/dm.DeviceMsg/shadowIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceMsgClient) GatewayCanBindIndex(ctx context.Context, in *GatewayCanBindIndexReq, opts ...grpc.CallOption) (*GatewayCanBindIndexResp, error) {
	out := new(GatewayCanBindIndexResp)
	err := c.cc.Invoke(ctx, "/dm.DeviceMsg/gatewayCanBindIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeviceMsgServer is the server API for DeviceMsg service.
// All implementations must embed UnimplementedDeviceMsgServer
// for forward compatibility
type DeviceMsgServer interface {
	//获取设备sdk调试日志
	SdkLogIndex(context.Context, *SdkLogIndexReq) (*SdkLogIndexResp, error)
	//获取设备调试信息记录登入登出,操作
	HubLogIndex(context.Context, *HubLogIndexReq) (*HubLogIndexResp, error)
	SendLogIndex(context.Context, *SendLogIndexReq) (*SendLogIndexResp, error)
	StatusLogIndex(context.Context, *StatusLogIndexReq) (*StatusLogIndexResp, error)
	//获取设备数据信息
	PropertyLogLatestIndex(context.Context, *PropertyLogLatestIndexReq) (*PropertyLogIndexResp, error)
	//获取设备数据信息
	PropertyLogIndex(context.Context, *PropertyLogIndexReq) (*PropertyLogIndexResp, error)
	//获取设备数据信息
	EventLogIndex(context.Context, *EventLogIndexReq) (*EventLogIndexResp, error)
	//获取设备影子列表
	ShadowIndex(context.Context, *PropertyLogLatestIndexReq) (*ShadowIndexResp, error)
	//获取网关可以绑定的子设备列表
	GatewayCanBindIndex(context.Context, *GatewayCanBindIndexReq) (*GatewayCanBindIndexResp, error)
	mustEmbedUnimplementedDeviceMsgServer()
}

// UnimplementedDeviceMsgServer must be embedded to have forward compatible implementations.
type UnimplementedDeviceMsgServer struct {
}

func (UnimplementedDeviceMsgServer) SdkLogIndex(context.Context, *SdkLogIndexReq) (*SdkLogIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SdkLogIndex not implemented")
}
func (UnimplementedDeviceMsgServer) HubLogIndex(context.Context, *HubLogIndexReq) (*HubLogIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HubLogIndex not implemented")
}
func (UnimplementedDeviceMsgServer) SendLogIndex(context.Context, *SendLogIndexReq) (*SendLogIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendLogIndex not implemented")
}
func (UnimplementedDeviceMsgServer) StatusLogIndex(context.Context, *StatusLogIndexReq) (*StatusLogIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatusLogIndex not implemented")
}
func (UnimplementedDeviceMsgServer) PropertyLogLatestIndex(context.Context, *PropertyLogLatestIndexReq) (*PropertyLogIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PropertyLogLatestIndex not implemented")
}
func (UnimplementedDeviceMsgServer) PropertyLogIndex(context.Context, *PropertyLogIndexReq) (*PropertyLogIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PropertyLogIndex not implemented")
}
func (UnimplementedDeviceMsgServer) EventLogIndex(context.Context, *EventLogIndexReq) (*EventLogIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EventLogIndex not implemented")
}
func (UnimplementedDeviceMsgServer) ShadowIndex(context.Context, *PropertyLogLatestIndexReq) (*ShadowIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShadowIndex not implemented")
}
func (UnimplementedDeviceMsgServer) GatewayCanBindIndex(context.Context, *GatewayCanBindIndexReq) (*GatewayCanBindIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GatewayCanBindIndex not implemented")
}
func (UnimplementedDeviceMsgServer) mustEmbedUnimplementedDeviceMsgServer() {}

// UnsafeDeviceMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeviceMsgServer will
// result in compilation errors.
type UnsafeDeviceMsgServer interface {
	mustEmbedUnimplementedDeviceMsgServer()
}

func RegisterDeviceMsgServer(s grpc.ServiceRegistrar, srv DeviceMsgServer) {
	s.RegisterService(&DeviceMsg_ServiceDesc, srv)
}

func _DeviceMsg_SdkLogIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkLogIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceMsgServer).SdkLogIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.DeviceMsg/sdkLogIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceMsgServer).SdkLogIndex(ctx, req.(*SdkLogIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceMsg_HubLogIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HubLogIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceMsgServer).HubLogIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.DeviceMsg/hubLogIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceMsgServer).HubLogIndex(ctx, req.(*HubLogIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceMsg_SendLogIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendLogIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceMsgServer).SendLogIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.DeviceMsg/sendLogIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceMsgServer).SendLogIndex(ctx, req.(*SendLogIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceMsg_StatusLogIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusLogIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceMsgServer).StatusLogIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.DeviceMsg/statusLogIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceMsgServer).StatusLogIndex(ctx, req.(*StatusLogIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceMsg_PropertyLogLatestIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PropertyLogLatestIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceMsgServer).PropertyLogLatestIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.DeviceMsg/propertyLogLatestIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceMsgServer).PropertyLogLatestIndex(ctx, req.(*PropertyLogLatestIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceMsg_PropertyLogIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PropertyLogIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceMsgServer).PropertyLogIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.DeviceMsg/propertyLogIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceMsgServer).PropertyLogIndex(ctx, req.(*PropertyLogIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceMsg_EventLogIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventLogIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceMsgServer).EventLogIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.DeviceMsg/eventLogIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceMsgServer).EventLogIndex(ctx, req.(*EventLogIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceMsg_ShadowIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PropertyLogLatestIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceMsgServer).ShadowIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.DeviceMsg/shadowIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceMsgServer).ShadowIndex(ctx, req.(*PropertyLogLatestIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceMsg_GatewayCanBindIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GatewayCanBindIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceMsgServer).GatewayCanBindIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.DeviceMsg/gatewayCanBindIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceMsgServer).GatewayCanBindIndex(ctx, req.(*GatewayCanBindIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

// DeviceMsg_ServiceDesc is the grpc.ServiceDesc for DeviceMsg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeviceMsg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dm.DeviceMsg",
	HandlerType: (*DeviceMsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "sdkLogIndex",
			Handler:    _DeviceMsg_SdkLogIndex_Handler,
		},
		{
			MethodName: "hubLogIndex",
			Handler:    _DeviceMsg_HubLogIndex_Handler,
		},
		{
			MethodName: "sendLogIndex",
			Handler:    _DeviceMsg_SendLogIndex_Handler,
		},
		{
			MethodName: "statusLogIndex",
			Handler:    _DeviceMsg_StatusLogIndex_Handler,
		},
		{
			MethodName: "propertyLogLatestIndex",
			Handler:    _DeviceMsg_PropertyLogLatestIndex_Handler,
		},
		{
			MethodName: "propertyLogIndex",
			Handler:    _DeviceMsg_PropertyLogIndex_Handler,
		},
		{
			MethodName: "eventLogIndex",
			Handler:    _DeviceMsg_EventLogIndex_Handler,
		},
		{
			MethodName: "shadowIndex",
			Handler:    _DeviceMsg_ShadowIndex_Handler,
		},
		{
			MethodName: "gatewayCanBindIndex",
			Handler:    _DeviceMsg_GatewayCanBindIndex_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/dm.proto",
}

// DeviceInteractClient is the client API for DeviceInteract service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeviceInteractClient interface {
	//调用设备行为
	ActionSend(ctx context.Context, in *ActionSendReq, opts ...grpc.CallOption) (*ActionSendResp, error)
	//获取异步调用设备行为的结果
	ActionRead(ctx context.Context, in *RespReadReq, opts ...grpc.CallOption) (*ActionSendResp, error)
	//回复调用设备行为
	ActionResp(ctx context.Context, in *ActionRespReq, opts ...grpc.CallOption) (*Empty, error)
	//请求设备获取设备最新属性
	PropertyGetReportSend(ctx context.Context, in *PropertyGetReportSendReq, opts ...grpc.CallOption) (*PropertyGetReportSendResp, error)
	//调用设备属性
	PropertyControlSend(ctx context.Context, in *PropertyControlSendReq, opts ...grpc.CallOption) (*PropertyControlSendResp, error)
	//批量调用设备属性
	PropertyControlMultiSend(ctx context.Context, in *PropertyControlMultiSendReq, opts ...grpc.CallOption) (*PropertyControlMultiSendResp, error)
	//获取异步调用设备属性的结果
	PropertyControlRead(ctx context.Context, in *RespReadReq, opts ...grpc.CallOption) (*PropertyControlSendResp, error)
	//发送消息给设备 -- 调试使用
	SendMsg(ctx context.Context, in *SendMsgReq, opts ...grpc.CallOption) (*SendMsgResp, error)
	//获取网关拓扑关系
	GatewayGetFoundSend(ctx context.Context, in *GatewayGetFoundReq, opts ...grpc.CallOption) (*Empty, error)
	//通知网关绑定子设备
	GatewayNotifyBindSend(ctx context.Context, in *GatewayNotifyBindSendReq, opts ...grpc.CallOption) (*Empty, error)
}

type deviceInteractClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceInteractClient(cc grpc.ClientConnInterface) DeviceInteractClient {
	return &deviceInteractClient{cc}
}

func (c *deviceInteractClient) ActionSend(ctx context.Context, in *ActionSendReq, opts ...grpc.CallOption) (*ActionSendResp, error) {
	out := new(ActionSendResp)
	err := c.cc.Invoke(ctx, "/dm.DeviceInteract/actionSend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceInteractClient) ActionRead(ctx context.Context, in *RespReadReq, opts ...grpc.CallOption) (*ActionSendResp, error) {
	out := new(ActionSendResp)
	err := c.cc.Invoke(ctx, "/dm.DeviceInteract/actionRead", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceInteractClient) ActionResp(ctx context.Context, in *ActionRespReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/dm.DeviceInteract/actionResp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceInteractClient) PropertyGetReportSend(ctx context.Context, in *PropertyGetReportSendReq, opts ...grpc.CallOption) (*PropertyGetReportSendResp, error) {
	out := new(PropertyGetReportSendResp)
	err := c.cc.Invoke(ctx, "/dm.DeviceInteract/propertyGetReportSend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceInteractClient) PropertyControlSend(ctx context.Context, in *PropertyControlSendReq, opts ...grpc.CallOption) (*PropertyControlSendResp, error) {
	out := new(PropertyControlSendResp)
	err := c.cc.Invoke(ctx, "/dm.DeviceInteract/propertyControlSend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceInteractClient) PropertyControlMultiSend(ctx context.Context, in *PropertyControlMultiSendReq, opts ...grpc.CallOption) (*PropertyControlMultiSendResp, error) {
	out := new(PropertyControlMultiSendResp)
	err := c.cc.Invoke(ctx, "/dm.DeviceInteract/propertyControlMultiSend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceInteractClient) PropertyControlRead(ctx context.Context, in *RespReadReq, opts ...grpc.CallOption) (*PropertyControlSendResp, error) {
	out := new(PropertyControlSendResp)
	err := c.cc.Invoke(ctx, "/dm.DeviceInteract/propertyControlRead", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceInteractClient) SendMsg(ctx context.Context, in *SendMsgReq, opts ...grpc.CallOption) (*SendMsgResp, error) {
	out := new(SendMsgResp)
	err := c.cc.Invoke(ctx, "/dm.DeviceInteract/sendMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceInteractClient) GatewayGetFoundSend(ctx context.Context, in *GatewayGetFoundReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/dm.DeviceInteract/gatewayGetFoundSend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceInteractClient) GatewayNotifyBindSend(ctx context.Context, in *GatewayNotifyBindSendReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/dm.DeviceInteract/gatewayNotifyBindSend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeviceInteractServer is the server API for DeviceInteract service.
// All implementations must embed UnimplementedDeviceInteractServer
// for forward compatibility
type DeviceInteractServer interface {
	//调用设备行为
	ActionSend(context.Context, *ActionSendReq) (*ActionSendResp, error)
	//获取异步调用设备行为的结果
	ActionRead(context.Context, *RespReadReq) (*ActionSendResp, error)
	//回复调用设备行为
	ActionResp(context.Context, *ActionRespReq) (*Empty, error)
	//请求设备获取设备最新属性
	PropertyGetReportSend(context.Context, *PropertyGetReportSendReq) (*PropertyGetReportSendResp, error)
	//调用设备属性
	PropertyControlSend(context.Context, *PropertyControlSendReq) (*PropertyControlSendResp, error)
	//批量调用设备属性
	PropertyControlMultiSend(context.Context, *PropertyControlMultiSendReq) (*PropertyControlMultiSendResp, error)
	//获取异步调用设备属性的结果
	PropertyControlRead(context.Context, *RespReadReq) (*PropertyControlSendResp, error)
	//发送消息给设备 -- 调试使用
	SendMsg(context.Context, *SendMsgReq) (*SendMsgResp, error)
	//获取网关拓扑关系
	GatewayGetFoundSend(context.Context, *GatewayGetFoundReq) (*Empty, error)
	//通知网关绑定子设备
	GatewayNotifyBindSend(context.Context, *GatewayNotifyBindSendReq) (*Empty, error)
	mustEmbedUnimplementedDeviceInteractServer()
}

// UnimplementedDeviceInteractServer must be embedded to have forward compatible implementations.
type UnimplementedDeviceInteractServer struct {
}

func (UnimplementedDeviceInteractServer) ActionSend(context.Context, *ActionSendReq) (*ActionSendResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActionSend not implemented")
}
func (UnimplementedDeviceInteractServer) ActionRead(context.Context, *RespReadReq) (*ActionSendResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActionRead not implemented")
}
func (UnimplementedDeviceInteractServer) ActionResp(context.Context, *ActionRespReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActionResp not implemented")
}
func (UnimplementedDeviceInteractServer) PropertyGetReportSend(context.Context, *PropertyGetReportSendReq) (*PropertyGetReportSendResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PropertyGetReportSend not implemented")
}
func (UnimplementedDeviceInteractServer) PropertyControlSend(context.Context, *PropertyControlSendReq) (*PropertyControlSendResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PropertyControlSend not implemented")
}
func (UnimplementedDeviceInteractServer) PropertyControlMultiSend(context.Context, *PropertyControlMultiSendReq) (*PropertyControlMultiSendResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PropertyControlMultiSend not implemented")
}
func (UnimplementedDeviceInteractServer) PropertyControlRead(context.Context, *RespReadReq) (*PropertyControlSendResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PropertyControlRead not implemented")
}
func (UnimplementedDeviceInteractServer) SendMsg(context.Context, *SendMsgReq) (*SendMsgResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMsg not implemented")
}
func (UnimplementedDeviceInteractServer) GatewayGetFoundSend(context.Context, *GatewayGetFoundReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GatewayGetFoundSend not implemented")
}
func (UnimplementedDeviceInteractServer) GatewayNotifyBindSend(context.Context, *GatewayNotifyBindSendReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GatewayNotifyBindSend not implemented")
}
func (UnimplementedDeviceInteractServer) mustEmbedUnimplementedDeviceInteractServer() {}

// UnsafeDeviceInteractServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeviceInteractServer will
// result in compilation errors.
type UnsafeDeviceInteractServer interface {
	mustEmbedUnimplementedDeviceInteractServer()
}

func RegisterDeviceInteractServer(s grpc.ServiceRegistrar, srv DeviceInteractServer) {
	s.RegisterService(&DeviceInteract_ServiceDesc, srv)
}

func _DeviceInteract_ActionSend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActionSendReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceInteractServer).ActionSend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.DeviceInteract/actionSend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceInteractServer).ActionSend(ctx, req.(*ActionSendReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceInteract_ActionRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RespReadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceInteractServer).ActionRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.DeviceInteract/actionRead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceInteractServer).ActionRead(ctx, req.(*RespReadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceInteract_ActionResp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActionRespReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceInteractServer).ActionResp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.DeviceInteract/actionResp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceInteractServer).ActionResp(ctx, req.(*ActionRespReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceInteract_PropertyGetReportSend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PropertyGetReportSendReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceInteractServer).PropertyGetReportSend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.DeviceInteract/propertyGetReportSend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceInteractServer).PropertyGetReportSend(ctx, req.(*PropertyGetReportSendReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceInteract_PropertyControlSend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PropertyControlSendReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceInteractServer).PropertyControlSend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.DeviceInteract/propertyControlSend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceInteractServer).PropertyControlSend(ctx, req.(*PropertyControlSendReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceInteract_PropertyControlMultiSend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PropertyControlMultiSendReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceInteractServer).PropertyControlMultiSend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.DeviceInteract/propertyControlMultiSend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceInteractServer).PropertyControlMultiSend(ctx, req.(*PropertyControlMultiSendReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceInteract_PropertyControlRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RespReadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceInteractServer).PropertyControlRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.DeviceInteract/propertyControlRead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceInteractServer).PropertyControlRead(ctx, req.(*RespReadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceInteract_SendMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceInteractServer).SendMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.DeviceInteract/sendMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceInteractServer).SendMsg(ctx, req.(*SendMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceInteract_GatewayGetFoundSend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GatewayGetFoundReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceInteractServer).GatewayGetFoundSend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.DeviceInteract/gatewayGetFoundSend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceInteractServer).GatewayGetFoundSend(ctx, req.(*GatewayGetFoundReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceInteract_GatewayNotifyBindSend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GatewayNotifyBindSendReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceInteractServer).GatewayNotifyBindSend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.DeviceInteract/gatewayNotifyBindSend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceInteractServer).GatewayNotifyBindSend(ctx, req.(*GatewayNotifyBindSendReq))
	}
	return interceptor(ctx, in, info, handler)
}

// DeviceInteract_ServiceDesc is the grpc.ServiceDesc for DeviceInteract service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeviceInteract_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dm.DeviceInteract",
	HandlerType: (*DeviceInteractServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "actionSend",
			Handler:    _DeviceInteract_ActionSend_Handler,
		},
		{
			MethodName: "actionRead",
			Handler:    _DeviceInteract_ActionRead_Handler,
		},
		{
			MethodName: "actionResp",
			Handler:    _DeviceInteract_ActionResp_Handler,
		},
		{
			MethodName: "propertyGetReportSend",
			Handler:    _DeviceInteract_PropertyGetReportSend_Handler,
		},
		{
			MethodName: "propertyControlSend",
			Handler:    _DeviceInteract_PropertyControlSend_Handler,
		},
		{
			MethodName: "propertyControlMultiSend",
			Handler:    _DeviceInteract_PropertyControlMultiSend_Handler,
		},
		{
			MethodName: "propertyControlRead",
			Handler:    _DeviceInteract_PropertyControlRead_Handler,
		},
		{
			MethodName: "sendMsg",
			Handler:    _DeviceInteract_SendMsg_Handler,
		},
		{
			MethodName: "gatewayGetFoundSend",
			Handler:    _DeviceInteract_GatewayGetFoundSend_Handler,
		},
		{
			MethodName: "gatewayNotifyBindSend",
			Handler:    _DeviceInteract_GatewayNotifyBindSend_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/dm.proto",
}

// OtaManageClient is the client API for OtaManage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OtaManageClient interface {
	//添加升级包
	OtaFirmwareInfoCreate(ctx context.Context, in *OtaFirmwareInfoCreateReq, opts ...grpc.CallOption) (*WithID, error)
	//修改升级包
	OtaFirmwareInfoUpdate(ctx context.Context, in *OtaFirmwareInfoUpdateReq, opts ...grpc.CallOption) (*WithID, error)
	//删除升级包
	OtaFirmwareInfoDelete(ctx context.Context, in *WithID, opts ...grpc.CallOption) (*Empty, error)
	//升级包列表
	OtaFirmwareInfoIndex(ctx context.Context, in *OtaFirmwareInfoIndexReq, opts ...grpc.CallOption) (*OtaFirmwareInfoIndexResp, error)
	//查询升级包
	OtaFirmwareInfoRead(ctx context.Context, in *WithID, opts ...grpc.CallOption) (*OtaFirmwareInfo, error)
	//创建静态升级批次
	OtaFirmwareJobCreate(ctx context.Context, in *OtaFirmwareJobInfo, opts ...grpc.CallOption) (*WithID, error)
	//获取升级包下的升级任务批次列表
	OtaFirmwareJobIndex(ctx context.Context, in *OtaFirmwareJobIndexReq, opts ...grpc.CallOption) (*OtaFirmwareJobIndexResp, error)
	//查询指定升级批次的详情
	OtaFirmwareJobRead(ctx context.Context, in *WithID, opts ...grpc.CallOption) (*OtaFirmwareJobInfo, error)
	//取消动态升级策略
	OtaFirmwareJobUpdate(ctx context.Context, in *OtaFirmwareJobInfo, opts ...grpc.CallOption) (*Empty, error)
	//查询指定升级批次下的设备升级作业列表
	OtaFirmwareDeviceIndex(ctx context.Context, in *OtaFirmwareDeviceIndexReq, opts ...grpc.CallOption) (*OtaFirmwareDeviceIndexResp, error)
	//取消指定批次下的设备升级作业
	OtaFirmwareDeviceCancel(ctx context.Context, in *OtaFirmwareDeviceCancelReq, opts ...grpc.CallOption) (*Empty, error)
	//重新升级指定批次下升级失败或升级取消的设备升级作业
	OtaFirmwareDeviceRetry(ctx context.Context, in *OtaFirmwareDeviceRetryReq, opts ...grpc.CallOption) (*Empty, error)
	//app确认设备升级
	OtaFirmwareDeviceConfirm(ctx context.Context, in *OtaFirmwareDeviceConfirmReq, opts ...grpc.CallOption) (*Empty, error)
	OtaModuleInfoCreate(ctx context.Context, in *OtaModuleInfo, opts ...grpc.CallOption) (*WithID, error)
	OtaModuleInfoUpdate(ctx context.Context, in *OtaModuleInfo, opts ...grpc.CallOption) (*Empty, error)
	OtaModuleInfoDelete(ctx context.Context, in *WithID, opts ...grpc.CallOption) (*Empty, error)
	OtaModuleInfoIndex(ctx context.Context, in *OtaModuleInfoIndexReq, opts ...grpc.CallOption) (*OtaModuleInfoIndexResp, error)
	OtaModuleInfoRead(ctx context.Context, in *WithIDCode, opts ...grpc.CallOption) (*OtaModuleInfo, error)
}

type otaManageClient struct {
	cc grpc.ClientConnInterface
}

func NewOtaManageClient(cc grpc.ClientConnInterface) OtaManageClient {
	return &otaManageClient{cc}
}

func (c *otaManageClient) OtaFirmwareInfoCreate(ctx context.Context, in *OtaFirmwareInfoCreateReq, opts ...grpc.CallOption) (*WithID, error) {
	out := new(WithID)
	err := c.cc.Invoke(ctx, "/dm.OtaManage/otaFirmwareInfoCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *otaManageClient) OtaFirmwareInfoUpdate(ctx context.Context, in *OtaFirmwareInfoUpdateReq, opts ...grpc.CallOption) (*WithID, error) {
	out := new(WithID)
	err := c.cc.Invoke(ctx, "/dm.OtaManage/otaFirmwareInfoUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *otaManageClient) OtaFirmwareInfoDelete(ctx context.Context, in *WithID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/dm.OtaManage/otaFirmwareInfoDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *otaManageClient) OtaFirmwareInfoIndex(ctx context.Context, in *OtaFirmwareInfoIndexReq, opts ...grpc.CallOption) (*OtaFirmwareInfoIndexResp, error) {
	out := new(OtaFirmwareInfoIndexResp)
	err := c.cc.Invoke(ctx, "/dm.OtaManage/otaFirmwareInfoIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *otaManageClient) OtaFirmwareInfoRead(ctx context.Context, in *WithID, opts ...grpc.CallOption) (*OtaFirmwareInfo, error) {
	out := new(OtaFirmwareInfo)
	err := c.cc.Invoke(ctx, "/dm.OtaManage/otaFirmwareInfoRead", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *otaManageClient) OtaFirmwareJobCreate(ctx context.Context, in *OtaFirmwareJobInfo, opts ...grpc.CallOption) (*WithID, error) {
	out := new(WithID)
	err := c.cc.Invoke(ctx, "/dm.OtaManage/otaFirmwareJobCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *otaManageClient) OtaFirmwareJobIndex(ctx context.Context, in *OtaFirmwareJobIndexReq, opts ...grpc.CallOption) (*OtaFirmwareJobIndexResp, error) {
	out := new(OtaFirmwareJobIndexResp)
	err := c.cc.Invoke(ctx, "/dm.OtaManage/otaFirmwareJobIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *otaManageClient) OtaFirmwareJobRead(ctx context.Context, in *WithID, opts ...grpc.CallOption) (*OtaFirmwareJobInfo, error) {
	out := new(OtaFirmwareJobInfo)
	err := c.cc.Invoke(ctx, "/dm.OtaManage/otaFirmwareJobRead", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *otaManageClient) OtaFirmwareJobUpdate(ctx context.Context, in *OtaFirmwareJobInfo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/dm.OtaManage/otaFirmwareJobUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *otaManageClient) OtaFirmwareDeviceIndex(ctx context.Context, in *OtaFirmwareDeviceIndexReq, opts ...grpc.CallOption) (*OtaFirmwareDeviceIndexResp, error) {
	out := new(OtaFirmwareDeviceIndexResp)
	err := c.cc.Invoke(ctx, "/dm.OtaManage/otaFirmwareDeviceIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *otaManageClient) OtaFirmwareDeviceCancel(ctx context.Context, in *OtaFirmwareDeviceCancelReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/dm.OtaManage/otaFirmwareDeviceCancel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *otaManageClient) OtaFirmwareDeviceRetry(ctx context.Context, in *OtaFirmwareDeviceRetryReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/dm.OtaManage/otaFirmwareDeviceRetry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *otaManageClient) OtaFirmwareDeviceConfirm(ctx context.Context, in *OtaFirmwareDeviceConfirmReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/dm.OtaManage/otaFirmwareDeviceConfirm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *otaManageClient) OtaModuleInfoCreate(ctx context.Context, in *OtaModuleInfo, opts ...grpc.CallOption) (*WithID, error) {
	out := new(WithID)
	err := c.cc.Invoke(ctx, "/dm.OtaManage/otaModuleInfoCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *otaManageClient) OtaModuleInfoUpdate(ctx context.Context, in *OtaModuleInfo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/dm.OtaManage/otaModuleInfoUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *otaManageClient) OtaModuleInfoDelete(ctx context.Context, in *WithID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/dm.OtaManage/otaModuleInfoDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *otaManageClient) OtaModuleInfoIndex(ctx context.Context, in *OtaModuleInfoIndexReq, opts ...grpc.CallOption) (*OtaModuleInfoIndexResp, error) {
	out := new(OtaModuleInfoIndexResp)
	err := c.cc.Invoke(ctx, "/dm.OtaManage/otaModuleInfoIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *otaManageClient) OtaModuleInfoRead(ctx context.Context, in *WithIDCode, opts ...grpc.CallOption) (*OtaModuleInfo, error) {
	out := new(OtaModuleInfo)
	err := c.cc.Invoke(ctx, "/dm.OtaManage/otaModuleInfoRead", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OtaManageServer is the server API for OtaManage service.
// All implementations must embed UnimplementedOtaManageServer
// for forward compatibility
type OtaManageServer interface {
	//添加升级包
	OtaFirmwareInfoCreate(context.Context, *OtaFirmwareInfoCreateReq) (*WithID, error)
	//修改升级包
	OtaFirmwareInfoUpdate(context.Context, *OtaFirmwareInfoUpdateReq) (*WithID, error)
	//删除升级包
	OtaFirmwareInfoDelete(context.Context, *WithID) (*Empty, error)
	//升级包列表
	OtaFirmwareInfoIndex(context.Context, *OtaFirmwareInfoIndexReq) (*OtaFirmwareInfoIndexResp, error)
	//查询升级包
	OtaFirmwareInfoRead(context.Context, *WithID) (*OtaFirmwareInfo, error)
	//创建静态升级批次
	OtaFirmwareJobCreate(context.Context, *OtaFirmwareJobInfo) (*WithID, error)
	//获取升级包下的升级任务批次列表
	OtaFirmwareJobIndex(context.Context, *OtaFirmwareJobIndexReq) (*OtaFirmwareJobIndexResp, error)
	//查询指定升级批次的详情
	OtaFirmwareJobRead(context.Context, *WithID) (*OtaFirmwareJobInfo, error)
	//取消动态升级策略
	OtaFirmwareJobUpdate(context.Context, *OtaFirmwareJobInfo) (*Empty, error)
	//查询指定升级批次下的设备升级作业列表
	OtaFirmwareDeviceIndex(context.Context, *OtaFirmwareDeviceIndexReq) (*OtaFirmwareDeviceIndexResp, error)
	//取消指定批次下的设备升级作业
	OtaFirmwareDeviceCancel(context.Context, *OtaFirmwareDeviceCancelReq) (*Empty, error)
	//重新升级指定批次下升级失败或升级取消的设备升级作业
	OtaFirmwareDeviceRetry(context.Context, *OtaFirmwareDeviceRetryReq) (*Empty, error)
	//app确认设备升级
	OtaFirmwareDeviceConfirm(context.Context, *OtaFirmwareDeviceConfirmReq) (*Empty, error)
	OtaModuleInfoCreate(context.Context, *OtaModuleInfo) (*WithID, error)
	OtaModuleInfoUpdate(context.Context, *OtaModuleInfo) (*Empty, error)
	OtaModuleInfoDelete(context.Context, *WithID) (*Empty, error)
	OtaModuleInfoIndex(context.Context, *OtaModuleInfoIndexReq) (*OtaModuleInfoIndexResp, error)
	OtaModuleInfoRead(context.Context, *WithIDCode) (*OtaModuleInfo, error)
	mustEmbedUnimplementedOtaManageServer()
}

// UnimplementedOtaManageServer must be embedded to have forward compatible implementations.
type UnimplementedOtaManageServer struct {
}

func (UnimplementedOtaManageServer) OtaFirmwareInfoCreate(context.Context, *OtaFirmwareInfoCreateReq) (*WithID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OtaFirmwareInfoCreate not implemented")
}
func (UnimplementedOtaManageServer) OtaFirmwareInfoUpdate(context.Context, *OtaFirmwareInfoUpdateReq) (*WithID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OtaFirmwareInfoUpdate not implemented")
}
func (UnimplementedOtaManageServer) OtaFirmwareInfoDelete(context.Context, *WithID) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OtaFirmwareInfoDelete not implemented")
}
func (UnimplementedOtaManageServer) OtaFirmwareInfoIndex(context.Context, *OtaFirmwareInfoIndexReq) (*OtaFirmwareInfoIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OtaFirmwareInfoIndex not implemented")
}
func (UnimplementedOtaManageServer) OtaFirmwareInfoRead(context.Context, *WithID) (*OtaFirmwareInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OtaFirmwareInfoRead not implemented")
}
func (UnimplementedOtaManageServer) OtaFirmwareJobCreate(context.Context, *OtaFirmwareJobInfo) (*WithID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OtaFirmwareJobCreate not implemented")
}
func (UnimplementedOtaManageServer) OtaFirmwareJobIndex(context.Context, *OtaFirmwareJobIndexReq) (*OtaFirmwareJobIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OtaFirmwareJobIndex not implemented")
}
func (UnimplementedOtaManageServer) OtaFirmwareJobRead(context.Context, *WithID) (*OtaFirmwareJobInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OtaFirmwareJobRead not implemented")
}
func (UnimplementedOtaManageServer) OtaFirmwareJobUpdate(context.Context, *OtaFirmwareJobInfo) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OtaFirmwareJobUpdate not implemented")
}
func (UnimplementedOtaManageServer) OtaFirmwareDeviceIndex(context.Context, *OtaFirmwareDeviceIndexReq) (*OtaFirmwareDeviceIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OtaFirmwareDeviceIndex not implemented")
}
func (UnimplementedOtaManageServer) OtaFirmwareDeviceCancel(context.Context, *OtaFirmwareDeviceCancelReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OtaFirmwareDeviceCancel not implemented")
}
func (UnimplementedOtaManageServer) OtaFirmwareDeviceRetry(context.Context, *OtaFirmwareDeviceRetryReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OtaFirmwareDeviceRetry not implemented")
}
func (UnimplementedOtaManageServer) OtaFirmwareDeviceConfirm(context.Context, *OtaFirmwareDeviceConfirmReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OtaFirmwareDeviceConfirm not implemented")
}
func (UnimplementedOtaManageServer) OtaModuleInfoCreate(context.Context, *OtaModuleInfo) (*WithID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OtaModuleInfoCreate not implemented")
}
func (UnimplementedOtaManageServer) OtaModuleInfoUpdate(context.Context, *OtaModuleInfo) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OtaModuleInfoUpdate not implemented")
}
func (UnimplementedOtaManageServer) OtaModuleInfoDelete(context.Context, *WithID) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OtaModuleInfoDelete not implemented")
}
func (UnimplementedOtaManageServer) OtaModuleInfoIndex(context.Context, *OtaModuleInfoIndexReq) (*OtaModuleInfoIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OtaModuleInfoIndex not implemented")
}
func (UnimplementedOtaManageServer) OtaModuleInfoRead(context.Context, *WithIDCode) (*OtaModuleInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OtaModuleInfoRead not implemented")
}
func (UnimplementedOtaManageServer) mustEmbedUnimplementedOtaManageServer() {}

// UnsafeOtaManageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OtaManageServer will
// result in compilation errors.
type UnsafeOtaManageServer interface {
	mustEmbedUnimplementedOtaManageServer()
}

func RegisterOtaManageServer(s grpc.ServiceRegistrar, srv OtaManageServer) {
	s.RegisterService(&OtaManage_ServiceDesc, srv)
}

func _OtaManage_OtaFirmwareInfoCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OtaFirmwareInfoCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OtaManageServer).OtaFirmwareInfoCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.OtaManage/otaFirmwareInfoCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OtaManageServer).OtaFirmwareInfoCreate(ctx, req.(*OtaFirmwareInfoCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OtaManage_OtaFirmwareInfoUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OtaFirmwareInfoUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OtaManageServer).OtaFirmwareInfoUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.OtaManage/otaFirmwareInfoUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OtaManageServer).OtaFirmwareInfoUpdate(ctx, req.(*OtaFirmwareInfoUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OtaManage_OtaFirmwareInfoDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OtaManageServer).OtaFirmwareInfoDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.OtaManage/otaFirmwareInfoDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OtaManageServer).OtaFirmwareInfoDelete(ctx, req.(*WithID))
	}
	return interceptor(ctx, in, info, handler)
}

func _OtaManage_OtaFirmwareInfoIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OtaFirmwareInfoIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OtaManageServer).OtaFirmwareInfoIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.OtaManage/otaFirmwareInfoIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OtaManageServer).OtaFirmwareInfoIndex(ctx, req.(*OtaFirmwareInfoIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OtaManage_OtaFirmwareInfoRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OtaManageServer).OtaFirmwareInfoRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.OtaManage/otaFirmwareInfoRead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OtaManageServer).OtaFirmwareInfoRead(ctx, req.(*WithID))
	}
	return interceptor(ctx, in, info, handler)
}

func _OtaManage_OtaFirmwareJobCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OtaFirmwareJobInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OtaManageServer).OtaFirmwareJobCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.OtaManage/otaFirmwareJobCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OtaManageServer).OtaFirmwareJobCreate(ctx, req.(*OtaFirmwareJobInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _OtaManage_OtaFirmwareJobIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OtaFirmwareJobIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OtaManageServer).OtaFirmwareJobIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.OtaManage/otaFirmwareJobIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OtaManageServer).OtaFirmwareJobIndex(ctx, req.(*OtaFirmwareJobIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OtaManage_OtaFirmwareJobRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OtaManageServer).OtaFirmwareJobRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.OtaManage/otaFirmwareJobRead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OtaManageServer).OtaFirmwareJobRead(ctx, req.(*WithID))
	}
	return interceptor(ctx, in, info, handler)
}

func _OtaManage_OtaFirmwareJobUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OtaFirmwareJobInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OtaManageServer).OtaFirmwareJobUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.OtaManage/otaFirmwareJobUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OtaManageServer).OtaFirmwareJobUpdate(ctx, req.(*OtaFirmwareJobInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _OtaManage_OtaFirmwareDeviceIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OtaFirmwareDeviceIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OtaManageServer).OtaFirmwareDeviceIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.OtaManage/otaFirmwareDeviceIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OtaManageServer).OtaFirmwareDeviceIndex(ctx, req.(*OtaFirmwareDeviceIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OtaManage_OtaFirmwareDeviceCancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OtaFirmwareDeviceCancelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OtaManageServer).OtaFirmwareDeviceCancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.OtaManage/otaFirmwareDeviceCancel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OtaManageServer).OtaFirmwareDeviceCancel(ctx, req.(*OtaFirmwareDeviceCancelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OtaManage_OtaFirmwareDeviceRetry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OtaFirmwareDeviceRetryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OtaManageServer).OtaFirmwareDeviceRetry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.OtaManage/otaFirmwareDeviceRetry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OtaManageServer).OtaFirmwareDeviceRetry(ctx, req.(*OtaFirmwareDeviceRetryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OtaManage_OtaFirmwareDeviceConfirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OtaFirmwareDeviceConfirmReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OtaManageServer).OtaFirmwareDeviceConfirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.OtaManage/otaFirmwareDeviceConfirm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OtaManageServer).OtaFirmwareDeviceConfirm(ctx, req.(*OtaFirmwareDeviceConfirmReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OtaManage_OtaModuleInfoCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OtaModuleInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OtaManageServer).OtaModuleInfoCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.OtaManage/otaModuleInfoCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OtaManageServer).OtaModuleInfoCreate(ctx, req.(*OtaModuleInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _OtaManage_OtaModuleInfoUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OtaModuleInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OtaManageServer).OtaModuleInfoUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.OtaManage/otaModuleInfoUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OtaManageServer).OtaModuleInfoUpdate(ctx, req.(*OtaModuleInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _OtaManage_OtaModuleInfoDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OtaManageServer).OtaModuleInfoDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.OtaManage/otaModuleInfoDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OtaManageServer).OtaModuleInfoDelete(ctx, req.(*WithID))
	}
	return interceptor(ctx, in, info, handler)
}

func _OtaManage_OtaModuleInfoIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OtaModuleInfoIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OtaManageServer).OtaModuleInfoIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.OtaManage/otaModuleInfoIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OtaManageServer).OtaModuleInfoIndex(ctx, req.(*OtaModuleInfoIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OtaManage_OtaModuleInfoRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithIDCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OtaManageServer).OtaModuleInfoRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.OtaManage/otaModuleInfoRead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OtaManageServer).OtaModuleInfoRead(ctx, req.(*WithIDCode))
	}
	return interceptor(ctx, in, info, handler)
}

// OtaManage_ServiceDesc is the grpc.ServiceDesc for OtaManage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OtaManage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dm.OtaManage",
	HandlerType: (*OtaManageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "otaFirmwareInfoCreate",
			Handler:    _OtaManage_OtaFirmwareInfoCreate_Handler,
		},
		{
			MethodName: "otaFirmwareInfoUpdate",
			Handler:    _OtaManage_OtaFirmwareInfoUpdate_Handler,
		},
		{
			MethodName: "otaFirmwareInfoDelete",
			Handler:    _OtaManage_OtaFirmwareInfoDelete_Handler,
		},
		{
			MethodName: "otaFirmwareInfoIndex",
			Handler:    _OtaManage_OtaFirmwareInfoIndex_Handler,
		},
		{
			MethodName: "otaFirmwareInfoRead",
			Handler:    _OtaManage_OtaFirmwareInfoRead_Handler,
		},
		{
			MethodName: "otaFirmwareJobCreate",
			Handler:    _OtaManage_OtaFirmwareJobCreate_Handler,
		},
		{
			MethodName: "otaFirmwareJobIndex",
			Handler:    _OtaManage_OtaFirmwareJobIndex_Handler,
		},
		{
			MethodName: "otaFirmwareJobRead",
			Handler:    _OtaManage_OtaFirmwareJobRead_Handler,
		},
		{
			MethodName: "otaFirmwareJobUpdate",
			Handler:    _OtaManage_OtaFirmwareJobUpdate_Handler,
		},
		{
			MethodName: "otaFirmwareDeviceIndex",
			Handler:    _OtaManage_OtaFirmwareDeviceIndex_Handler,
		},
		{
			MethodName: "otaFirmwareDeviceCancel",
			Handler:    _OtaManage_OtaFirmwareDeviceCancel_Handler,
		},
		{
			MethodName: "otaFirmwareDeviceRetry",
			Handler:    _OtaManage_OtaFirmwareDeviceRetry_Handler,
		},
		{
			MethodName: "otaFirmwareDeviceConfirm",
			Handler:    _OtaManage_OtaFirmwareDeviceConfirm_Handler,
		},
		{
			MethodName: "otaModuleInfoCreate",
			Handler:    _OtaManage_OtaModuleInfoCreate_Handler,
		},
		{
			MethodName: "otaModuleInfoUpdate",
			Handler:    _OtaManage_OtaModuleInfoUpdate_Handler,
		},
		{
			MethodName: "otaModuleInfoDelete",
			Handler:    _OtaManage_OtaModuleInfoDelete_Handler,
		},
		{
			MethodName: "otaModuleInfoIndex",
			Handler:    _OtaManage_OtaModuleInfoIndex_Handler,
		},
		{
			MethodName: "otaModuleInfoRead",
			Handler:    _OtaManage_OtaModuleInfoRead_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/dm.proto",
}

// UserDeviceClient is the client API for UserDevice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserDeviceClient interface {
	//用户收藏的设备
	UserDeviceCollectMultiCreate(ctx context.Context, in *UserDeviceCollectSave, opts ...grpc.CallOption) (*Empty, error)
	UserDeviceCollectMultiDelete(ctx context.Context, in *UserDeviceCollectSave, opts ...grpc.CallOption) (*Empty, error)
	UserDeviceCollectIndex(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*UserDeviceCollectSave, error)
	//分享设备
	UserDeviceShareCreate(ctx context.Context, in *UserDeviceShareInfo, opts ...grpc.CallOption) (*WithID, error)
	//更新权限
	UserDeviceShareUpdate(ctx context.Context, in *UserDeviceShareInfo, opts ...grpc.CallOption) (*Empty, error)
	//取消分享设备
	UserDeviceShareDelete(ctx context.Context, in *UserDeviceShareReadReq, opts ...grpc.CallOption) (*Empty, error)
	//取消分享设备
	UserDeviceShareMultiDelete(ctx context.Context, in *UserDeviceShareMultiDeleteReq, opts ...grpc.CallOption) (*Empty, error)
	//获取设备分享列表(只有设备的所有者才能获取)
	UserDeviceShareIndex(ctx context.Context, in *UserDeviceShareIndexReq, opts ...grpc.CallOption) (*UserDeviceShareIndexResp, error)
	//获取设备分享的详情
	UserDeviceShareRead(ctx context.Context, in *UserDeviceShareReadReq, opts ...grpc.CallOption) (*UserDeviceShareInfo, error)
	//转让设备
	UserDeviceTransfer(ctx context.Context, in *DeviceTransferReq, opts ...grpc.CallOption) (*Empty, error)
	//  rpc userDeviceOtaGetVersion(UserDeviceOtaGetVersionReq)returns(userDeviceOtaGetVersionResp);
	//创建批量分享二维码，设备列表写入缓存
	UserDeviceShareMultiCreate(ctx context.Context, in *UserDeviceShareMultiInfo, opts ...grpc.CallOption) (*UserDeviceShareMultiToken, error)
	//扫码后获取设备列表
	UserDeivceShareMultiIndex(ctx context.Context, in *UserDeviceShareMultiToken, opts ...grpc.CallOption) (*UserDeviceShareMultiInfo, error)
	//接受批量分享的设备
	UserDeivceShareMultiAccept(ctx context.Context, in *UserDeviceShareMultiAcceptReq, opts ...grpc.CallOption) (*Empty, error)
}

type userDeviceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserDeviceClient(cc grpc.ClientConnInterface) UserDeviceClient {
	return &userDeviceClient{cc}
}

func (c *userDeviceClient) UserDeviceCollectMultiCreate(ctx context.Context, in *UserDeviceCollectSave, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/dm.userDevice/userDeviceCollectMultiCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDeviceClient) UserDeviceCollectMultiDelete(ctx context.Context, in *UserDeviceCollectSave, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/dm.userDevice/userDeviceCollectMultiDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDeviceClient) UserDeviceCollectIndex(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*UserDeviceCollectSave, error) {
	out := new(UserDeviceCollectSave)
	err := c.cc.Invoke(ctx, "/dm.userDevice/userDeviceCollectIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDeviceClient) UserDeviceShareCreate(ctx context.Context, in *UserDeviceShareInfo, opts ...grpc.CallOption) (*WithID, error) {
	out := new(WithID)
	err := c.cc.Invoke(ctx, "/dm.userDevice/userDeviceShareCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDeviceClient) UserDeviceShareUpdate(ctx context.Context, in *UserDeviceShareInfo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/dm.userDevice/userDeviceShareUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDeviceClient) UserDeviceShareDelete(ctx context.Context, in *UserDeviceShareReadReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/dm.userDevice/userDeviceShareDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDeviceClient) UserDeviceShareMultiDelete(ctx context.Context, in *UserDeviceShareMultiDeleteReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/dm.userDevice/userDeviceShareMultiDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDeviceClient) UserDeviceShareIndex(ctx context.Context, in *UserDeviceShareIndexReq, opts ...grpc.CallOption) (*UserDeviceShareIndexResp, error) {
	out := new(UserDeviceShareIndexResp)
	err := c.cc.Invoke(ctx, "/dm.userDevice/userDeviceShareIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDeviceClient) UserDeviceShareRead(ctx context.Context, in *UserDeviceShareReadReq, opts ...grpc.CallOption) (*UserDeviceShareInfo, error) {
	out := new(UserDeviceShareInfo)
	err := c.cc.Invoke(ctx, "/dm.userDevice/userDeviceShareRead", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDeviceClient) UserDeviceTransfer(ctx context.Context, in *DeviceTransferReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/dm.userDevice/userDeviceTransfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDeviceClient) UserDeviceShareMultiCreate(ctx context.Context, in *UserDeviceShareMultiInfo, opts ...grpc.CallOption) (*UserDeviceShareMultiToken, error) {
	out := new(UserDeviceShareMultiToken)
	err := c.cc.Invoke(ctx, "/dm.userDevice/userDeviceShareMultiCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDeviceClient) UserDeivceShareMultiIndex(ctx context.Context, in *UserDeviceShareMultiToken, opts ...grpc.CallOption) (*UserDeviceShareMultiInfo, error) {
	out := new(UserDeviceShareMultiInfo)
	err := c.cc.Invoke(ctx, "/dm.userDevice/userDeivceShareMultiIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDeviceClient) UserDeivceShareMultiAccept(ctx context.Context, in *UserDeviceShareMultiAcceptReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/dm.userDevice/userDeivceShareMultiAccept", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserDeviceServer is the server API for UserDevice service.
// All implementations must embed UnimplementedUserDeviceServer
// for forward compatibility
type UserDeviceServer interface {
	//用户收藏的设备
	UserDeviceCollectMultiCreate(context.Context, *UserDeviceCollectSave) (*Empty, error)
	UserDeviceCollectMultiDelete(context.Context, *UserDeviceCollectSave) (*Empty, error)
	UserDeviceCollectIndex(context.Context, *Empty) (*UserDeviceCollectSave, error)
	//分享设备
	UserDeviceShareCreate(context.Context, *UserDeviceShareInfo) (*WithID, error)
	//更新权限
	UserDeviceShareUpdate(context.Context, *UserDeviceShareInfo) (*Empty, error)
	//取消分享设备
	UserDeviceShareDelete(context.Context, *UserDeviceShareReadReq) (*Empty, error)
	//取消分享设备
	UserDeviceShareMultiDelete(context.Context, *UserDeviceShareMultiDeleteReq) (*Empty, error)
	//获取设备分享列表(只有设备的所有者才能获取)
	UserDeviceShareIndex(context.Context, *UserDeviceShareIndexReq) (*UserDeviceShareIndexResp, error)
	//获取设备分享的详情
	UserDeviceShareRead(context.Context, *UserDeviceShareReadReq) (*UserDeviceShareInfo, error)
	//转让设备
	UserDeviceTransfer(context.Context, *DeviceTransferReq) (*Empty, error)
	//  rpc userDeviceOtaGetVersion(UserDeviceOtaGetVersionReq)returns(userDeviceOtaGetVersionResp);
	//创建批量分享二维码，设备列表写入缓存
	UserDeviceShareMultiCreate(context.Context, *UserDeviceShareMultiInfo) (*UserDeviceShareMultiToken, error)
	//扫码后获取设备列表
	UserDeivceShareMultiIndex(context.Context, *UserDeviceShareMultiToken) (*UserDeviceShareMultiInfo, error)
	//接受批量分享的设备
	UserDeivceShareMultiAccept(context.Context, *UserDeviceShareMultiAcceptReq) (*Empty, error)
	mustEmbedUnimplementedUserDeviceServer()
}

// UnimplementedUserDeviceServer must be embedded to have forward compatible implementations.
type UnimplementedUserDeviceServer struct {
}

func (UnimplementedUserDeviceServer) UserDeviceCollectMultiCreate(context.Context, *UserDeviceCollectSave) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserDeviceCollectMultiCreate not implemented")
}
func (UnimplementedUserDeviceServer) UserDeviceCollectMultiDelete(context.Context, *UserDeviceCollectSave) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserDeviceCollectMultiDelete not implemented")
}
func (UnimplementedUserDeviceServer) UserDeviceCollectIndex(context.Context, *Empty) (*UserDeviceCollectSave, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserDeviceCollectIndex not implemented")
}
func (UnimplementedUserDeviceServer) UserDeviceShareCreate(context.Context, *UserDeviceShareInfo) (*WithID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserDeviceShareCreate not implemented")
}
func (UnimplementedUserDeviceServer) UserDeviceShareUpdate(context.Context, *UserDeviceShareInfo) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserDeviceShareUpdate not implemented")
}
func (UnimplementedUserDeviceServer) UserDeviceShareDelete(context.Context, *UserDeviceShareReadReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserDeviceShareDelete not implemented")
}
func (UnimplementedUserDeviceServer) UserDeviceShareMultiDelete(context.Context, *UserDeviceShareMultiDeleteReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserDeviceShareMultiDelete not implemented")
}
func (UnimplementedUserDeviceServer) UserDeviceShareIndex(context.Context, *UserDeviceShareIndexReq) (*UserDeviceShareIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserDeviceShareIndex not implemented")
}
func (UnimplementedUserDeviceServer) UserDeviceShareRead(context.Context, *UserDeviceShareReadReq) (*UserDeviceShareInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserDeviceShareRead not implemented")
}
func (UnimplementedUserDeviceServer) UserDeviceTransfer(context.Context, *DeviceTransferReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserDeviceTransfer not implemented")
}
func (UnimplementedUserDeviceServer) UserDeviceShareMultiCreate(context.Context, *UserDeviceShareMultiInfo) (*UserDeviceShareMultiToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserDeviceShareMultiCreate not implemented")
}
func (UnimplementedUserDeviceServer) UserDeivceShareMultiIndex(context.Context, *UserDeviceShareMultiToken) (*UserDeviceShareMultiInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserDeivceShareMultiIndex not implemented")
}
func (UnimplementedUserDeviceServer) UserDeivceShareMultiAccept(context.Context, *UserDeviceShareMultiAcceptReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserDeivceShareMultiAccept not implemented")
}
func (UnimplementedUserDeviceServer) mustEmbedUnimplementedUserDeviceServer() {}

// UnsafeUserDeviceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserDeviceServer will
// result in compilation errors.
type UnsafeUserDeviceServer interface {
	mustEmbedUnimplementedUserDeviceServer()
}

func RegisterUserDeviceServer(s grpc.ServiceRegistrar, srv UserDeviceServer) {
	s.RegisterService(&UserDevice_ServiceDesc, srv)
}

func _UserDevice_UserDeviceCollectMultiCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserDeviceCollectSave)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDeviceServer).UserDeviceCollectMultiCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.userDevice/userDeviceCollectMultiCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDeviceServer).UserDeviceCollectMultiCreate(ctx, req.(*UserDeviceCollectSave))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDevice_UserDeviceCollectMultiDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserDeviceCollectSave)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDeviceServer).UserDeviceCollectMultiDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.userDevice/userDeviceCollectMultiDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDeviceServer).UserDeviceCollectMultiDelete(ctx, req.(*UserDeviceCollectSave))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDevice_UserDeviceCollectIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDeviceServer).UserDeviceCollectIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.userDevice/userDeviceCollectIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDeviceServer).UserDeviceCollectIndex(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDevice_UserDeviceShareCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserDeviceShareInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDeviceServer).UserDeviceShareCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.userDevice/userDeviceShareCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDeviceServer).UserDeviceShareCreate(ctx, req.(*UserDeviceShareInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDevice_UserDeviceShareUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserDeviceShareInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDeviceServer).UserDeviceShareUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.userDevice/userDeviceShareUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDeviceServer).UserDeviceShareUpdate(ctx, req.(*UserDeviceShareInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDevice_UserDeviceShareDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserDeviceShareReadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDeviceServer).UserDeviceShareDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.userDevice/userDeviceShareDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDeviceServer).UserDeviceShareDelete(ctx, req.(*UserDeviceShareReadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDevice_UserDeviceShareMultiDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserDeviceShareMultiDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDeviceServer).UserDeviceShareMultiDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.userDevice/userDeviceShareMultiDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDeviceServer).UserDeviceShareMultiDelete(ctx, req.(*UserDeviceShareMultiDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDevice_UserDeviceShareIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserDeviceShareIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDeviceServer).UserDeviceShareIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.userDevice/userDeviceShareIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDeviceServer).UserDeviceShareIndex(ctx, req.(*UserDeviceShareIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDevice_UserDeviceShareRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserDeviceShareReadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDeviceServer).UserDeviceShareRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.userDevice/userDeviceShareRead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDeviceServer).UserDeviceShareRead(ctx, req.(*UserDeviceShareReadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDevice_UserDeviceTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceTransferReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDeviceServer).UserDeviceTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.userDevice/userDeviceTransfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDeviceServer).UserDeviceTransfer(ctx, req.(*DeviceTransferReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDevice_UserDeviceShareMultiCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserDeviceShareMultiInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDeviceServer).UserDeviceShareMultiCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.userDevice/userDeviceShareMultiCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDeviceServer).UserDeviceShareMultiCreate(ctx, req.(*UserDeviceShareMultiInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDevice_UserDeivceShareMultiIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserDeviceShareMultiToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDeviceServer).UserDeivceShareMultiIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.userDevice/userDeivceShareMultiIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDeviceServer).UserDeivceShareMultiIndex(ctx, req.(*UserDeviceShareMultiToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDevice_UserDeivceShareMultiAccept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserDeviceShareMultiAcceptReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDeviceServer).UserDeivceShareMultiAccept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.userDevice/userDeivceShareMultiAccept",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDeviceServer).UserDeivceShareMultiAccept(ctx, req.(*UserDeviceShareMultiAcceptReq))
	}
	return interceptor(ctx, in, info, handler)
}

// UserDevice_ServiceDesc is the grpc.ServiceDesc for UserDevice service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserDevice_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dm.userDevice",
	HandlerType: (*UserDeviceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "userDeviceCollectMultiCreate",
			Handler:    _UserDevice_UserDeviceCollectMultiCreate_Handler,
		},
		{
			MethodName: "userDeviceCollectMultiDelete",
			Handler:    _UserDevice_UserDeviceCollectMultiDelete_Handler,
		},
		{
			MethodName: "userDeviceCollectIndex",
			Handler:    _UserDevice_UserDeviceCollectIndex_Handler,
		},
		{
			MethodName: "userDeviceShareCreate",
			Handler:    _UserDevice_UserDeviceShareCreate_Handler,
		},
		{
			MethodName: "userDeviceShareUpdate",
			Handler:    _UserDevice_UserDeviceShareUpdate_Handler,
		},
		{
			MethodName: "userDeviceShareDelete",
			Handler:    _UserDevice_UserDeviceShareDelete_Handler,
		},
		{
			MethodName: "userDeviceShareMultiDelete",
			Handler:    _UserDevice_UserDeviceShareMultiDelete_Handler,
		},
		{
			MethodName: "userDeviceShareIndex",
			Handler:    _UserDevice_UserDeviceShareIndex_Handler,
		},
		{
			MethodName: "userDeviceShareRead",
			Handler:    _UserDevice_UserDeviceShareRead_Handler,
		},
		{
			MethodName: "userDeviceTransfer",
			Handler:    _UserDevice_UserDeviceTransfer_Handler,
		},
		{
			MethodName: "userDeviceShareMultiCreate",
			Handler:    _UserDevice_UserDeviceShareMultiCreate_Handler,
		},
		{
			MethodName: "userDeivceShareMultiIndex",
			Handler:    _UserDevice_UserDeivceShareMultiIndex_Handler,
		},
		{
			MethodName: "userDeivceShareMultiAccept",
			Handler:    _UserDevice_UserDeivceShareMultiAccept_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/dm.proto",
}
